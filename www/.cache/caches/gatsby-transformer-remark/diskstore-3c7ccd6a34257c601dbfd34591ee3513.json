{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-html-cf70ec0a45fc957dd23a8a5ce70e0a71-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"uluchshenie-mehanizma-vyvoda-tipa-vysshego-poryadka-dlya-obobshchennyh-konstruktorov\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Улучшение механизма вывода типа высшего порядка для обобщенных конструкторов</span></h2>\n<p>В <em>TypeScript</em> версии <code>v3.4</code> был усовершенствован механизм вывода типов для обобщенных функций реализующих функциональную композицию. Это в свою очередь повысило эффективность использования   <em>функциональных-hoc</em> при разработке <em>React-приложений</em>. С выходом версии <code>v3.5</code> подобный механизм был перенесен на конструкторы классов, что также повысило эффективность вывода типов при использования их в качестве <em>классовых-hoc</em>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> ComponentClass<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">:</span> <span class=\"token constant\">P</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Component<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token punctuation\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> HocProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hocProp<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> hoc<span class=\"token operator\">&lt;</span>WrappedProps<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">:</span> ComponentClass<span class=\"token operator\">&lt;</span>WrappedProps<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> ComponentClass<span class=\"token operator\">&lt;</span>WrappedProps <span class=\"token operator\">&amp;</span> HocProps<span class=\"token operator\">></span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> NestedProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> nestedProp<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomComponent</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token operator\">&lt;</span>NestedProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * &lt;v3.5\n * const WrappedComponent: ComponentClass&lt;NestedProps&lt;{}> &amp; HocProps>\n * \n * >=v3.5\n * const WrappedComponent: new &lt;T>(props: NestedProps&lt;T> &amp; HocProps) => Component&lt;NestedProps&lt;T> &amp; HocProps>\n * \n */</span>\n<span class=\"token keyword\">const</span> WrappedComponent <span class=\"token operator\">=</span> <span class=\"token function\">hoc</span><span class=\"token punctuation\">(</span>CustomComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>"}