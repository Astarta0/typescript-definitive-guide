{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-ast-3dc1701a7fe93215daf41c18e0749666-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"html","value":"\n    <button class=\"content__button_copy-to-buffer\" path=\"prividenie-k-konstante-const-assertion\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  "},{"type":"span","children":[{"type":"text","value":"Привидение к константе (const assertion)"}],"data":{"hName":"span"}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":43,"offset":42},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ни для кого не секрет, что с точки зрения ","position":{"start":{"line":3,"column":1,"offset":44},"end":{"line":3,"column":43,"offset":86},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"JavaScript","position":{"start":{"line":3,"column":44,"offset":87},"end":{"line":3,"column":54,"offset":97},"indent":[]}}],"position":{"start":{"line":3,"column":43,"offset":86},"end":{"line":3,"column":55,"offset":98},"indent":[]}},{"type":"text","value":", а следовательно и ","position":{"start":{"line":3,"column":55,"offset":98},"end":{"line":3,"column":75,"offset":118},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":3,"column":76,"offset":119},"end":{"line":3,"column":86,"offset":129},"indent":[]}}],"position":{"start":{"line":3,"column":75,"offset":118},"end":{"line":3,"column":87,"offset":130},"indent":[]}},{"type":"text","value":", все примитивные литеральные значения являются константными значениями. С точки зрения среды исполнения два эквивалентных литерала любого литерального типа являются единым значением. То есть, среда исполнения расценивает два строковых литерала ","position":{"start":{"line":3,"column":87,"offset":130},"end":{"line":3,"column":332,"offset":375},"indent":[]}},{"type":"inlineCode","value":"'text'","position":{"start":{"line":3,"column":332,"offset":375},"end":{"line":3,"column":340,"offset":383},"indent":[]}},{"type":"text","value":" и ","position":{"start":{"line":3,"column":340,"offset":383},"end":{"line":3,"column":343,"offset":386},"indent":[]}},{"type":"inlineCode","value":"'text'","position":{"start":{"line":3,"column":343,"offset":386},"end":{"line":3,"column":351,"offset":394},"indent":[]}},{"type":"text","value":", как один литерал. Тоже самое справедливо и для остальных литералов к которым помимо типа ","position":{"start":{"line":3,"column":351,"offset":394},"end":{"line":3,"column":442,"offset":485},"indent":[]}},{"type":"inlineCode","value":"string","position":{"start":{"line":3,"column":442,"offset":485},"end":{"line":3,"column":450,"offset":493},"indent":[]}},{"type":"text","value":" также относятся такие типы, как ","position":{"start":{"line":3,"column":450,"offset":493},"end":{"line":3,"column":483,"offset":526},"indent":[]}},{"type":"inlineCode","value":"number","position":{"start":{"line":3,"column":483,"offset":526},"end":{"line":3,"column":491,"offset":534},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":3,"column":491,"offset":534},"end":{"line":3,"column":493,"offset":536},"indent":[]}},{"type":"inlineCode","value":"boolean","position":{"start":{"line":3,"column":493,"offset":536},"end":{"line":3,"column":502,"offset":545},"indent":[]}},{"type":"text","value":" и ","position":{"start":{"line":3,"column":502,"offset":545},"end":{"line":3,"column":505,"offset":548},"indent":[]}},{"type":"inlineCode","value":"symbol","position":{"start":{"line":3,"column":505,"offset":548},"end":{"line":3,"column":513,"offset":556},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":3,"column":513,"offset":556},"end":{"line":3,"column":515,"offset":558},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":44},"end":{"line":3,"column":515,"offset":558},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Тем не менее, сложно найти разработчика ","position":{"start":{"line":6,"column":1,"offset":561},"end":{"line":6,"column":41,"offset":601},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":6,"column":42,"offset":602},"end":{"line":6,"column":52,"offset":612},"indent":[]}}],"position":{"start":{"line":6,"column":41,"offset":601},"end":{"line":6,"column":53,"offset":613},"indent":[]}},{"type":"text","value":", который при объявлении каких-либо конструкций, которым предстоит проверка на принадлжность к литеральному типу, не испытывал дискомфорта из-за вывода типов.","position":{"start":{"line":6,"column":53,"offset":613},"end":{"line":6,"column":211,"offset":771},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":561},"end":{"line":6,"column":211,"offset":771},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Status <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token operator\">|</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> Status<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> reuest<span class=\"token punctuation\">:</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, Type 'number' is not assignable to type 'Status'.ts(2322)</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":8,"column":1,"offset":773},"end":{"line":15,"column":6,"offset":971},"indent":[1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"В коде выше ошибка возникает по причине того, что вывод типов определяет принадлежность значения переменной ","position":{"start":{"line":17,"column":1,"offset":973},"end":{"line":17,"column":109,"offset":1081},"indent":[]}},{"type":"inlineCode","value":"status","position":{"start":{"line":17,"column":109,"offset":1081},"end":{"line":17,"column":117,"offset":1089},"indent":[]}},{"type":"text","value":" к типу ","position":{"start":{"line":17,"column":117,"offset":1089},"end":{"line":17,"column":125,"offset":1097},"indent":[]}},{"type":"inlineCode","value":"number","position":{"start":{"line":17,"column":125,"offset":1097},"end":{"line":17,"column":133,"offset":1105},"indent":[]}},{"type":"text","value":", а не литеральному числовому типу ","position":{"start":{"line":17,"column":133,"offset":1105},"end":{"line":17,"column":168,"offset":1140},"indent":[]}},{"type":"inlineCode","value":"200","position":{"start":{"line":17,"column":168,"offset":1140},"end":{"line":17,"column":173,"offset":1145},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":17,"column":173,"offset":1145},"end":{"line":17,"column":174,"offset":1146},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":973},"end":{"line":17,"column":174,"offset":1146},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// вывод типов видит как</span>\n<span class=\"token keyword\">let</span> status<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\n<span class=\"token comment\">// в то время как требуется так</span>\n<span class=\"token keyword\">let</span> status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":19,"column":1,"offset":1148},"end":{"line":25,"column":6,"offset":1275},"indent":[1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"До версии ","position":{"start":{"line":28,"column":1,"offset":1278},"end":{"line":28,"column":11,"offset":1288},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":28,"column":12,"offset":1289},"end":{"line":28,"column":22,"offset":1299},"indent":[]}}],"position":{"start":{"line":28,"column":11,"offset":1288},"end":{"line":28,"column":23,"offset":1300},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":28,"column":23,"offset":1300},"end":{"line":28,"column":24,"offset":1301},"indent":[]}},{"type":"inlineCode","value":"v3.4","position":{"start":{"line":28,"column":24,"offset":1301},"end":{"line":28,"column":30,"offset":1307},"indent":[]}},{"type":"text","value":" без явного указания типа или явного приведения к нему, существовал только один выход из сложившейся, в коде выше, ситуации. Он заключался в утверждении типа, спомощью оператора ","position":{"start":{"line":28,"column":30,"offset":1307},"end":{"line":28,"column":208,"offset":1485},"indent":[]}},{"type":"inlineCode","value":"as","position":{"start":{"line":28,"column":208,"offset":1485},"end":{"line":28,"column":212,"offset":1489},"indent":[]}},{"type":"text","value":" либо угловых скобок ","position":{"start":{"line":28,"column":212,"offset":1489},"end":{"line":28,"column":233,"offset":1510},"indent":[]}},{"type":"inlineCode","value":"<>","position":{"start":{"line":28,"column":233,"offset":1510},"end":{"line":28,"column":237,"offset":1514},"indent":[]}},{"type":"text","value":", непосредственно самого значения нуждающегося в этом.","position":{"start":{"line":28,"column":237,"offset":1514},"end":{"line":28,"column":291,"offset":1568},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1278},"end":{"line":28,"column":291,"offset":1568},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Status <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token operator\">|</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> Status<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// утверждаем компилятору..</span>\n<span class=\"token keyword\">let</span> reuest<span class=\"token punctuation\">:</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> status <span class=\"token keyword\">as</span> <span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// …с помощью as оператора</span>\n<span class=\"token keyword\">let</span> reuest<span class=\"token punctuation\">:</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">200</span><span class=\"token operator\">></span>status<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// …с помощью угловых скобок</span>\n<span class=\"token comment\">// …что должен рассматривать значение асоциированное со 'status', как значение принадлежащие к литеральному типу 'Status'</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":30,"column":1,"offset":1570},"end":{"line":40,"column":6,"offset":1966},"indent":[1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":43,"column":2,"offset":1970},"end":{"line":43,"column":12,"offset":1980},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1969},"end":{"line":43,"column":13,"offset":1981},"indent":[]}},{"type":"text","value":", начиная с версии ","position":{"start":{"line":43,"column":13,"offset":1981},"end":{"line":43,"column":32,"offset":2000},"indent":[]}},{"type":"inlineCode","value":"v3.4","position":{"start":{"line":43,"column":32,"offset":2000},"end":{"line":43,"column":38,"offset":2006},"indent":[]}},{"type":"text","value":", вводит такое понятие, как ","position":{"start":{"line":43,"column":38,"offset":2006},"end":{"line":43,"column":66,"offset":2034},"indent":[]}},{"type":"inlineCode","value":"const assertion","position":{"start":{"line":43,"column":66,"offset":2034},"end":{"line":43,"column":83,"offset":2051},"indent":[]}},{"type":"text","value":" (утверждение к константе или константное утверждение).","position":{"start":{"line":43,"column":83,"offset":2051},"end":{"line":43,"column":138,"offset":2106},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1969},"end":{"line":43,"column":138,"offset":2106},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Константное утверждение это такое утверждение объявление которого производится с помощью опертора ","position":{"start":{"line":46,"column":1,"offset":2109},"end":{"line":46,"column":99,"offset":2207},"indent":[]}},{"type":"inlineCode","value":"as","position":{"start":{"line":46,"column":99,"offset":2207},"end":{"line":46,"column":103,"offset":2211},"indent":[]}},{"type":"text","value":" либо угловых скобок ","position":{"start":{"line":46,"column":103,"offset":2211},"end":{"line":46,"column":124,"offset":2232},"indent":[]}},{"type":"inlineCode","value":"<>","position":{"start":{"line":46,"column":124,"offset":2232},"end":{"line":46,"column":128,"offset":2236},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":46,"column":128,"offset":2236},"end":{"line":46,"column":129,"offset":2237},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2109},"end":{"line":46,"column":129,"offset":2237},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Status <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token operator\">|</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> Status<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> reuest<span class=\"token punctuation\">:</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> status <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> reuest<span class=\"token punctuation\">:</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span><span class=\"token operator\">></span>status<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":48,"column":1,"offset":2239},"end":{"line":56,"column":6,"offset":2445},"indent":[1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"По причине того, что компилятор получает инструкции заставляющие его расценивать значение как константное, вывод типов определяет его принадлежность к литеральному типу.","position":{"start":{"line":58,"column":1,"offset":2447},"end":{"line":58,"column":170,"offset":2616},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2447},"end":{"line":58,"column":170,"offset":2616},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Утверждение к константе заставляет вывод типов определять принадлежность массива к типу ","position":{"start":{"line":60,"column":1,"offset":2618},"end":{"line":60,"column":89,"offset":2706},"indent":[]}},{"type":"inlineCode","value":"readonly tuple","position":{"start":{"line":60,"column":89,"offset":2706},"end":{"line":60,"column":105,"offset":2722},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":60,"column":105,"offset":2722},"end":{"line":60,"column":106,"offset":2723},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2618},"end":{"line":60,"column":106,"offset":2723},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let a: number[]</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let b: readonly [200, 404]</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let c: readonly [200, 404]</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":62,"column":1,"offset":2725},"end":{"line":67,"column":6,"offset":2902},"indent":[1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"В случае с объектным типом, утверждение к константе рекурсивно помечает все его поля как ","position":{"start":{"line":69,"column":1,"offset":2904},"end":{"line":69,"column":90,"offset":2993},"indent":[]}},{"type":"inlineCode","value":"readonly","position":{"start":{"line":69,"column":90,"offset":2993},"end":{"line":69,"column":100,"offset":3003},"indent":[]}},{"type":"text","value":". Кроме того, все его поля принадлежащие к примитивным типам расцениваются как литеральные типы.","position":{"start":{"line":69,"column":100,"offset":3003},"end":{"line":69,"column":196,"offset":3099},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":2904},"end":{"line":69,"column":196,"offset":3099},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> NotConstResponseType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    status<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        role<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ConstResponseType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> <span class=\"token operator\">|</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        role<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>role<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NotConstResponseType</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>role<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ConstResponseType</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>role<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ConstResponseType</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":71,"column":1,"offset":3101},"end":{"line":90,"column":6,"offset":3538},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"Но стоит помнить, что утверждение к констранте, применимо исключительно к литералам ","position":{"start":{"line":92,"column":1,"offset":3540},"end":{"line":92,"column":85,"offset":3624},"indent":[]}},{"type":"inlineCode","value":"number","position":{"start":{"line":92,"column":85,"offset":3624},"end":{"line":92,"column":93,"offset":3632},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":92,"column":93,"offset":3632},"end":{"line":92,"column":95,"offset":3634},"indent":[]}},{"type":"inlineCode","value":"string","position":{"start":{"line":92,"column":95,"offset":3634},"end":{"line":92,"column":103,"offset":3642},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":92,"column":103,"offset":3642},"end":{"line":92,"column":105,"offset":3644},"indent":[]}},{"type":"inlineCode","value":"boolean","position":{"start":{"line":92,"column":105,"offset":3644},"end":{"line":92,"column":114,"offset":3653},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":92,"column":114,"offset":3653},"end":{"line":92,"column":116,"offset":3655},"indent":[]}},{"type":"inlineCode","value":"array","position":{"start":{"line":92,"column":116,"offset":3655},"end":{"line":92,"column":123,"offset":3662},"indent":[]}},{"type":"text","value":" и ","position":{"start":{"line":92,"column":123,"offset":3662},"end":{"line":92,"column":126,"offset":3665},"indent":[]}},{"type":"inlineCode","value":"object","position":{"start":{"line":92,"column":126,"offset":3665},"end":{"line":92,"column":134,"offset":3673},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":92,"column":134,"offset":3673},"end":{"line":92,"column":135,"offset":3674},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3540},"end":{"line":92,"column":135,"offset":3674},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'value'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok - 'value' является литералом, let a: \"value\"</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok - 100 является литералом, let b: 100</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok - true является литералом, let c: true</span>\n\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok - [] является литералом, let d: readonly []</span>\n<span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok - {} является литералом, let e: {readonly f: 100;}</span>\n\n<span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let array: number[]</span>\n<span class=\"token keyword\">let</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let object: {f: number;}</span>\n\n<span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> value <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error - value это ссылка идентификатор хранящий литерал</span>\n<span class=\"token keyword\">let</span> g <span class=\"token operator\">=</span> array <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error - array это ссылка на идентификатор хранящий ссылку на объект массива</span>\n<span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> object <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error - object это ссылка иденитификатор хранящий ссылку на объект объекта</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":94,"column":1,"offset":3676},"end":{"line":109,"column":6,"offset":4472},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"Но кроме того, все три рассмотренных случая утверждения к константе (примитивных, массивов и объектных типов) может создать впечатление, что в ","position":{"start":{"line":112,"column":1,"offset":4475},"end":{"line":112,"column":144,"offset":4618},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":112,"column":145,"offset":4619},"end":{"line":112,"column":155,"offset":4629},"indent":[]}}],"position":{"start":{"line":112,"column":144,"offset":4618},"end":{"line":112,"column":156,"offset":4630},"indent":[]}},{"type":"text","value":", наконец, появились структуры, которые справедливо назвать теми самыми, неизменяемыми ни при каких условиях, константами. И это действительно так, но лишь от части. Дело в том, что на момент версии ","position":{"start":{"line":112,"column":156,"offset":4630},"end":{"line":112,"column":355,"offset":4829},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":112,"column":356,"offset":4830},"end":{"line":112,"column":366,"offset":4840},"indent":[]}}],"position":{"start":{"line":112,"column":355,"offset":4829},"end":{"line":112,"column":367,"offset":4841},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":112,"column":367,"offset":4841},"end":{"line":112,"column":368,"offset":4842},"indent":[]}},{"type":"inlineCode","value":"v3.4","position":{"start":{"line":112,"column":368,"offset":4842},"end":{"line":112,"column":374,"offset":4848},"indent":[]}},{"type":"text","value":" принадлежность объектных и массивоподобных типов к константе зависит от значения с которыми они ассоциированы.","position":{"start":{"line":112,"column":374,"offset":4848},"end":{"line":112,"column":485,"offset":4959},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":4475},"end":{"line":112,"column":485,"offset":4959},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"В случае, когда литералы ссылочных типов (массивы и объекты) ассоциированны при помощи агрегационных отношений со значением также принадлежащим к ссылочному типу, то они представляются такими, какими были на момент ассоциации. Кроме того поведение механизма приведения к константе зависит от другого механизма – деструктуризации.","position":{"start":{"line":114,"column":1,"offset":4961},"end":{"line":114,"column":330,"offset":5290},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":4961},"end":{"line":114,"column":330,"offset":5290},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> defaultObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let defaultObject: {f: number;}</span>\n<span class=\"token keyword\">let</span> constObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let constObject: {readonly f: 100;}</span>\n\n<span class=\"token keyword\">let</span> defaultArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let defaultArray: number[]</span>\n<span class=\"token keyword\">let</span> constArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let constArray: readonly [0, 1, 2]</span>\n\n\n<span class=\"token comment\">// неожиданно - o0.f не имеет модификатора readonly! Однако ожидаемо, что o0.f.f иммутабельный (неизменяемый) объект</span>\n<span class=\"token keyword\">let</span> o0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {f: {readonly f: 100;};}</span>\n<span class=\"token comment\">// ожидаемо - o1.f имеет модификатор readonly. Вполне ожидаемо: o1.f.f мутабельный (изменяемый) объект</span>\n<span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> defaultObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {readonly f: {f: number;};}</span>\n<span class=\"token comment\">// ожидаемо - o2 иммутабельный (неизменяемый) объект </span>\n<span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>defaultObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {readonly f: number;}</span>\n<span class=\"token comment\">// неожиданно - o3.f не имеет модификатора readonly. ожиданно- o3.f.f иммутабельный (неизменяемый) объект</span>\n<span class=\"token keyword\">let</span> o3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>defaultObject<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {f: {readonly f: number;};}</span>\n\n<span class=\"token comment\">// ожиданно - o4.f и o4.f.f иммутабельные (неизменяемые) объекты</span>\n<span class=\"token keyword\">let</span> o4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> constObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let o4: {readonly f: {readonly f: 100;};}</span>\n<span class=\"token comment\">// ожиданно - o5 иммутабельный (неизменяемый)  объект</span>\n<span class=\"token keyword\">let</span> o5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>constObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let o5: {readonly f: 100;}</span>\n<span class=\"token comment\">// неожиданно - o6.f не имеет модификатора readonly. ожиданно- o6.f.f иммутабельный (неизменяемый) объект</span>\n<span class=\"token keyword\">let</span> o6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>constObject<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {f: {readonly f: 100;};}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":116,"column":1,"offset":5292},"end":{"line":139,"column":6,"offset":6681},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"По причине того, что непримитивные (объектные) типы данных, хранящиеся в массиве, подчиняются правилам описанным выше, подробное рассмотрение процесса утверждения массива к константе будет опущено.","position":{"start":{"line":141,"column":1,"offset":6683},"end":{"line":141,"column":198,"offset":6880},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":6683},"end":{"line":141,"column":198,"offset":6880},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"И последнее о чем стоит упомянуть, утверждение к константе применимо только к простым выражениям.","position":{"start":{"line":144,"column":1,"offset":6883},"end":{"line":144,"column":98,"offset":6980},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":6883},"end":{"line":144,"column":98,"offset":6980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"let a = (Math.round(Math.random() * 1) ? 'yes' : 'no') as const; // Error\nlet b = Math.round(Math.random() * 1) ? 'yes' as const : 'no' as const; // Ok, let b: \"yes\" | \"no\"","position":{"start":{"line":146,"column":1,"offset":6982},"end":{"line":147,"column":99,"offset":7154},"indent":[1]}}],"position":{"start":{"line":146,"column":1,"offset":6982},"end":{"line":147,"column":99,"offset":7154},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":148,"column":1,"offset":7155}}}}