{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-html-8299107db3c2a31950ef8e8067e18ed5-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"proverka-nevyzvannyh-funkcii\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Проверка невызванных функций</span></h2>\n<p>Случаются случаи, когда разработчики по невнимательности или из-за невнятно выбранных названий забывают вызывать функции, что может привести к трудновыявляемому багу. </p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Разработчик подумал что isAuthorized\n     * это поле или свойство объекта, но не метод.\n     * \n     * Учитывая многообразие языков программирования\n     * с различными конвенциями именования, такая ошибка\n     * не является надуманной для недавно пришедших в\n     * ECMScript коммунити.\n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * гость смог выполнить действия требующие\n         * привелегии авторизованного пользователя.\n         */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Поэтому начиная с <em>TypeScript</em> <code>v3.7</code> компилятор расценивает подобные ситуации как ошибку.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [TypeScript &lt; v3.7]\n     * > Ok! Трудно выявляемая ошибка,\n     * \n     * [TypeScript >= v3.7]\n     * > Error! \n     * This condition will always return true since the\n     * function is always defined. Did you mean to call\n     * it instead?\n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Но поскольку подобное изменение является значимым, новое поведение нацелено исключительно на выражения расположенные в условном операторе <code>if</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [TypeScript >= v3.7]\n     * > Error\n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * name эквивалентно undefined\n     * хотя в реальности должно\n     * иметь значение 'guest'.\n     */</span>\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>isAuthorized <span class=\"token operator\">?</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'guest'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Кроме того, оно не работает с необязательными членами и при установленным в <code>false</code> опции компилятора <code>--strictNullChecks</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    isAuthorized <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// необязательный член</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [TypeScript &lt; v3.7]\n     * > Ok! Трудно выявляемая ошибка,\n     * \n     * [TypeScript >= v3.7]\n     * > Ok! Трудно выявляемая ошибка,\n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Также же ошибки не возникает если невызванная функция вызывается далее в условном блоке.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Ok!, ???</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    user<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>В случаях когда подобный сценарий является преднамеренным, как например при тестировании, то невызванную функцию можно проверять на <code>null</code> или <code>undefined</code>, а также прибегнуть к двойному отрицанию и тем самым дать понять что действия являются обдуманными.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>"}