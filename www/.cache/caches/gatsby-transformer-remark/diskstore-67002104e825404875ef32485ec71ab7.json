{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-html-4ef26cc526eb67cf707524be9a9ec1b3-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"operator-opcionalnoi-posledovatelnosti\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Оператор опциональной последовательности (?.)</span></h2>\n<p>Начиная с текущей (<code>v3.7</code>) версии, <em>TypeScript</em> реализовал функционал обозначаемый как опертор опциональной последовательности (<em>optional chaining operator</em>) внесенный в спецификацию <em>ECMScript</em> комитетом <em>TC39</em>. Оператор опциональной последовательности обозначается вопросительным знаком после которого следует точка <code>?.</code> и предназначен для безопасного обращения к членам объекта через ссылку которая может иметь значение <code>null</code> или <code>undefined</code>. Этого функционала очень давно все ждали, поэтому не будем медлить и немедля приступим к его рассмотрению на простом пример.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\">some.ts</span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Вложенные друг в друга типы\n * (как матрешки) объявленные\n * семантически в обратном порядке.\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">:</span><span class=\"token constant\">D</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">:</span><span class=\"token constant\">C</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">:</span><span class=\"token constant\">B</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Представьте сценарий по которому\n * ответ от сервера может представлять\n * из себя json соответствующий как типу\n * A так и объекту у которого отсутствуют\n * какие-либо принаки {}.\n */</span>\n\n\n<span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * При поппытке обращения к несуществующим\n * полям объекта возникнет соответствующее\n * исключение.\n */</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! поскольку отсутствуют операции над значением undefined</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Runtime Error! </span>\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Runtime Error!</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Runtime Error!</span>\n\n<span class=\"token comment\">/**\n * Подобное можно избежать произведя\n * проверку на существование ссылок.\n */</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Здесь можно обратится к полю n,\n     * которое также может быть не определенно\n     * что при попытке вызвать методы реализованные\n     * в типе Number также приведет к исключению.\n     * Чтобы этого избежать потребуется дополнительная\n     * проверка. Но стоит сразу заметить, что обычной\n     * проверки на существование поля a.b.c.d.n может\n     * быть недостаточно, поскольку значение поля n може\n     * быть 0, что при преобразовании типов преобразуется\n     * в false. Поэтому помимо наличие самого поля необходимо\n     * также проверить его значение. \n     */</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Сложно представить разработчика, который на практике не сталкивался с чем-то подобным и не испытывал желания избавится от написания утомительных проверок. И наконец свершилось! Разработчики <em>TypeScript</em> реализовали оператор опциональной последовательности известный также как <em>элвис-оператор</em>.</p>\n<p>Элвис-оператор позволяет избавится от написания утомительных условных инструкций требуя от разработчика своего указания лишь в потенциально опасных местах. Оценить его мощь будет проще переписав предыдущий пример.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">:</span><span class=\"token constant\">D</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">:</span><span class=\"token constant\">C</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">:</span><span class=\"token constant\">B</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Ещё раз стоит обратить внимание на то,\n * что указание элвис-оператора требуется\n * во всех потенциально опасных местах, поскольку\n * наличие одной ссылки не гарантирует наличие остальных\n * во всей цепочки выовов.\n * \n * 0) поскольку отсутствуют операции над значением undefined\n * 1) если ссылка на \"b\" существует вернуть значение ассоциированное с полем \"c\"\n * 2) если ссылки на \"b\" и \"c\" существуют вернуть значение ассоциированное с полем \"d\"\n * 3) если ссылки на \"b\" и \"c\" и \"d\" существуют вернуть значение ассоциированное с полем \"n\"\n * 4) если ссылки на \"b\" и \"c\" и \"d\" и \"n\" существуют вернуть значение возвращенное методом \"toFixed\"\n */</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (0)</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (1)</span>\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (2)</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>d<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (3)</span>\n<span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>d<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>n<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (4)</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>В случаях, когда элвис-оператор обнаруживает ссылку со значением <code>null</code> или <code>undefined</code>, результатом возвращенным из выражения становится <code>undefined</code>. </p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> o0<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> o1<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{a: null}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/**\n * Несмотря на то, что во втором случае\n * значение поля \"a\" равно null, n1,\n * также как и n0 будет иметь значение\n * и следовательно тип undefined.\n */</span>\n<span class=\"token keyword\">let</span> n0 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// n0 имеет значение undefined;</span>\n<span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// n1 имеет значение;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>кроме того важной особенностью при использовании элвис-оператора является тот факт, что вывод типов не определяет тип как объединение включающий тип <code>undefined</code>, что в свою очередь избавляет от дополнительных проверок.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> o0<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> o1<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{a: null}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> n0 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// let n0: number; а не number | undefined</span>\n<span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// let n1: number; а не number | undefined</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Кроме того элвис-опрератор также может быть применен при вызове методов, а в случае отстутствия ссылок на них результатом вызова также будет <code>undefined</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Вводим вывод типов в амешательство путем\n     * присваивания функции в положительном случае\n     * и null в отрицательном. \n     */</span>\n    f <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>f<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// результатом выражения вызова метода является undefined</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Таким образом выход версии <code>v3.7</code> дал разработчикам на языке <em>TypeScript</em> инструмент предотвращающий исключения связанные с обращением к отсутствующим ссылкам или ссылкам имеющим значение <code>null</code>, который кроме всего не чувствителен к значениям преобразование которых к типу Boolean принимает ложную форму (<code>0</code>, <code>NaN</code>, <code>false</code>), что в свою очередь ознаминовало начало эпохи в которой нет места конструкциям выполняющих утомительные и проверки наличия ссылок. </p>"}