{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-ast-f9e73bb0eea2b4feebb4ee9e4f1eb984-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"html","value":"\n    <button class=\"content__button_copy-to-buffer\" path=\"vspomogatelnyi-tip-omit\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  "},{"type":"span","children":[{"type":"text","value":"Вспомогательный тип Omit"}],"data":{"hName":"span"}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":27,"offset":26},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"В повседневной разработке очень часто требуется определить новый тип описывающий некоторую часть существующего. До версии ","position":{"start":{"line":3,"column":1,"offset":28},"end":{"line":3,"column":123,"offset":150},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":3,"column":124,"offset":151},"end":{"line":3,"column":134,"offset":161},"indent":[]}}],"position":{"start":{"line":3,"column":123,"offset":150},"end":{"line":3,"column":135,"offset":162},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":3,"column":135,"offset":162},"end":{"line":3,"column":136,"offset":163},"indent":[]}},{"type":"inlineCode","value":"3.5","position":{"start":{"line":3,"column":136,"offset":163},"end":{"line":3,"column":141,"offset":168},"indent":[]}},{"type":"text","value":" подобное можно было реализовать при помощи типов ","position":{"start":{"line":3,"column":141,"offset":168},"end":{"line":3,"column":191,"offset":218},"indent":[]}},{"type":"inlineCode","value":"Exclude<T, U>","position":{"start":{"line":3,"column":191,"offset":218},"end":{"line":3,"column":206,"offset":233},"indent":[]}},{"type":"text","value":" и ","position":{"start":{"line":3,"column":206,"offset":233},"end":{"line":3,"column":209,"offset":236},"indent":[]}},{"type":"inlineCode","value":"Pick<T, K>","position":{"start":{"line":3,"column":209,"offset":236},"end":{"line":3,"column":221,"offset":248},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":3,"column":221,"offset":248},"end":{"line":3,"column":222,"offset":249},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":28},"end":{"line":3,"column":222,"offset":249},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * определяем тип Union состоящий из строковых литеральных типов\n * представляемых ключами типа Person, за исключением исключенного\n * поля age.\n * \n * type RemainingKeys = \"firstName\" | \"lastName\"\n */</span>\n<span class=\"token keyword\">type</span> RemainingKeys <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> Person<span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * определяем новый тип состоящий из ключей\n * полученных на предыдущем шаге.\n * \n * type PersonName = {\n *  firstName: string;\n *  lastName: string;\n * }\n */</span>\n<span class=\"token keyword\">type</span> PersonName <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> RemainingKeys<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":6,"column":1,"offset":252},"end":{"line":33,"column":6,"offset":824},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"Поскольку потребность в сужении типа возникает довольно часто, это вынуждает разработчиков выносить требующийся функционал в отдельную сущность, что неизбежно затрудняет чтение кода другими разработчиками, так как знакомый всем механизм скрыт за незнакомым им идентификатором типа (именем типа).","position":{"start":{"line":35,"column":1,"offset":826},"end":{"line":35,"column":296,"offset":1121},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":826},"end":{"line":35,"column":296,"offset":1121},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"По этой причине разработчики ","position":{"start":{"line":37,"column":1,"offset":1123},"end":{"line":37,"column":30,"offset":1152},"indent":[]}},{"type":"inlineCode","value":"TypeScript","position":{"start":{"line":37,"column":30,"offset":1152},"end":{"line":37,"column":42,"offset":1164},"indent":[]}},{"type":"text","value":" расширили стандартную библиотеку ","position":{"start":{"line":37,"column":42,"offset":1164},"end":{"line":37,"column":76,"offset":1198},"indent":[]}},{"type":"inlineCode","value":"lib.d.ts","position":{"start":{"line":37,"column":76,"offset":1198},"end":{"line":37,"column":86,"offset":1208},"indent":[]}},{"type":"text","value":" новым вспомогательным типом ","position":{"start":{"line":37,"column":86,"offset":1208},"end":{"line":37,"column":115,"offset":1237},"indent":[]}},{"type":"inlineCode","value":"Omit<T, K>","position":{"start":{"line":37,"column":115,"offset":1237},"end":{"line":37,"column":127,"offset":1249},"indent":[]}},{"type":"text","value":", который стандартизирует, обсуждаемую на протяжении главы, логику.","position":{"start":{"line":37,"column":127,"offset":1249},"end":{"line":37,"column":194,"offset":1316},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1123},"end":{"line":37,"column":194,"offset":1316},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * type PersonName = {\n *  firstName: string;\n *  lastName: string;\n * }\n */</span>\n<span class=\"token keyword\">type</span> PersonName <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":39,"column":1,"offset":1318},"end":{"line":54,"column":6,"offset":1542},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":55,"column":1,"offset":1543}}}}