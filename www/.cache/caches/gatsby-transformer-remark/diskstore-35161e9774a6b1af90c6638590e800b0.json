{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-html-f9e73bb0eea2b4feebb4ee9e4f1eb984-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"vspomogatelnyi-tip-omit\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Вспомогательный тип Omit</span></h2>\n<p>В повседневной разработке очень часто требуется определить новый тип описывающий некоторую часть существующего. До версии <em>TypeScript</em> <code>3.5</code> подобное можно было реализовать при помощи типов <code>Exclude&#x3C;T, U></code> и <code>Pick&#x3C;T, K></code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * определяем тип Union состоящий из строковых литеральных типов\n * представляемых ключами типа Person, за исключением исключенного\n * поля age.\n * \n * type RemainingKeys = \"firstName\" | \"lastName\"\n */</span>\n<span class=\"token keyword\">type</span> RemainingKeys <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> Person<span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * определяем новый тип состоящий из ключей\n * полученных на предыдущем шаге.\n * \n * type PersonName = {\n *  firstName: string;\n *  lastName: string;\n * }\n */</span>\n<span class=\"token keyword\">type</span> PersonName <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> RemainingKeys<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>Поскольку потребность в сужении типа возникает довольно часто, это вынуждает разработчиков выносить требующийся функционал в отдельную сущность, что неизбежно затрудняет чтение кода другими разработчиками, так как знакомый всем механизм скрыт за незнакомым им идентификатором типа (именем типа).</p>\n<p>По этой причине разработчики <code>TypeScript</code> расширили стандартную библиотеку <code>lib.d.ts</code> новым вспомогательным типом <code>Omit&#x3C;T, K></code>, который стандартизирует, обсуждаемую на протяжении главы, логику.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n    age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * type PersonName = {\n *  firstName: string;\n *  lastName: string;\n * }\n */</span>\n<span class=\"token keyword\">type</span> PersonName <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>"}