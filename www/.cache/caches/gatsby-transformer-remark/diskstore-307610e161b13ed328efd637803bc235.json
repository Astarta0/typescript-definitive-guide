{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-ast-4ef26cc526eb67cf707524be9a9ec1b3-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"html","value":"\n    <button class=\"content__button_copy-to-buffer\" path=\"operator-opcionalnoi-posledovatelnosti\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  "},{"type":"span","children":[{"type":"text","value":"Оператор опциональной последовательности (?.)"}],"data":{"hName":"span"}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":48,"offset":47},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Начиная с текущей (","position":{"start":{"line":3,"column":1,"offset":49},"end":{"line":3,"column":20,"offset":68},"indent":[]}},{"type":"inlineCode","value":"v3.7","position":{"start":{"line":3,"column":20,"offset":68},"end":{"line":3,"column":26,"offset":74},"indent":[]}},{"type":"text","value":") версии, ","position":{"start":{"line":3,"column":26,"offset":74},"end":{"line":3,"column":36,"offset":84},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":3,"column":37,"offset":85},"end":{"line":3,"column":47,"offset":95},"indent":[]}}],"position":{"start":{"line":3,"column":36,"offset":84},"end":{"line":3,"column":48,"offset":96},"indent":[]}},{"type":"text","value":" реализовал функционал обозначаемый как опертор опциональной последовательности (","position":{"start":{"line":3,"column":48,"offset":96},"end":{"line":3,"column":129,"offset":177},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"optional chaining operator","position":{"start":{"line":3,"column":130,"offset":178},"end":{"line":3,"column":156,"offset":204},"indent":[]}}],"position":{"start":{"line":3,"column":129,"offset":177},"end":{"line":3,"column":157,"offset":205},"indent":[]}},{"type":"text","value":") внесенный в спецификацию ","position":{"start":{"line":3,"column":157,"offset":205},"end":{"line":3,"column":184,"offset":232},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ECMScript","position":{"start":{"line":3,"column":185,"offset":233},"end":{"line":3,"column":194,"offset":242},"indent":[]}}],"position":{"start":{"line":3,"column":184,"offset":232},"end":{"line":3,"column":195,"offset":243},"indent":[]}},{"type":"text","value":" комитетом ","position":{"start":{"line":3,"column":195,"offset":243},"end":{"line":3,"column":206,"offset":254},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TC39","position":{"start":{"line":3,"column":207,"offset":255},"end":{"line":3,"column":211,"offset":259},"indent":[]}}],"position":{"start":{"line":3,"column":206,"offset":254},"end":{"line":3,"column":212,"offset":260},"indent":[]}},{"type":"text","value":". Оператор опциональной последовательности обозначается вопросительным знаком после которого следует точка ","position":{"start":{"line":3,"column":212,"offset":260},"end":{"line":3,"column":319,"offset":367},"indent":[]}},{"type":"inlineCode","value":"?.","position":{"start":{"line":3,"column":319,"offset":367},"end":{"line":3,"column":323,"offset":371},"indent":[]}},{"type":"text","value":" и предназначен для безопасного обращения к членам объекта через ссылку которая может иметь значение ","position":{"start":{"line":3,"column":323,"offset":371},"end":{"line":3,"column":424,"offset":472},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":3,"column":424,"offset":472},"end":{"line":3,"column":430,"offset":478},"indent":[]}},{"type":"text","value":" или ","position":{"start":{"line":3,"column":430,"offset":478},"end":{"line":3,"column":435,"offset":483},"indent":[]}},{"type":"inlineCode","value":"undefined","position":{"start":{"line":3,"column":435,"offset":483},"end":{"line":3,"column":446,"offset":494},"indent":[]}},{"type":"text","value":". Этого функционала очень давно все ждали, поэтому не будем медлить и немедля приступим к его рассмотрению на простом пример.","position":{"start":{"line":3,"column":446,"offset":494},"end":{"line":3,"column":571,"offset":619},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":49},"end":{"line":3,"column":571,"offset":619},"indent":[]}},{"type":"html","lang":"ts","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\">some.ts</span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Вложенные друг в друга типы\n * (как матрешки) объявленные\n * семантически в обратном порядке.\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">:</span><span class=\"token constant\">D</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">:</span><span class=\"token constant\">C</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">:</span><span class=\"token constant\">B</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Представьте сценарий по которому\n * ответ от сервера может представлять\n * из себя json соответствующий как типу\n * A так и объекту у которого отсутствуют\n * какие-либо принаки {}.\n */</span>\n\n\n<span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * При поппытке обращения к несуществующим\n * полям объекта возникнет соответствующее\n * исключение.\n */</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! поскольку отсутствуют операции над значением undefined</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Runtime Error! </span>\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Runtime Error!</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Runtime Error!</span>\n\n<span class=\"token comment\">/**\n * Подобное можно избежать произведя\n * проверку на существование ссылок.\n */</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Здесь можно обратится к полю n,\n     * которое также может быть не определенно\n     * что при попытке вызвать методы реализованные\n     * в типе Number также приведет к исключению.\n     * Чтобы этого избежать потребуется дополнительная\n     * проверка. Но стоит сразу заметить, что обычной\n     * проверки на существование поля a.b.c.d.n может\n     * быть недостаточно, поскольку значение поля n може\n     * быть 0, что при преобразовании типов преобразуется\n     * в false. Поэтому помимо наличие самого поля необходимо\n     * также проверить его значение. \n     */</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","position":{"start":{"line":5,"column":1,"offset":621},"end":{"line":62,"column":4,"offset":2161},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":"some.ts"}},{"type":"paragraph","children":[{"type":"text","value":"Сложно представить разработчика, который на практике не сталкивался с чем-то подобным и не испытывал желания избавится от написания утомительных проверок. И наконец свершилось! Разработчики ","position":{"start":{"line":64,"column":1,"offset":2163},"end":{"line":64,"column":191,"offset":2353},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":64,"column":192,"offset":2354},"end":{"line":64,"column":202,"offset":2364},"indent":[]}}],"position":{"start":{"line":64,"column":191,"offset":2353},"end":{"line":64,"column":203,"offset":2365},"indent":[]}},{"type":"text","value":" реализовали оператор опциональной последовательности известный также как ","position":{"start":{"line":64,"column":203,"offset":2365},"end":{"line":64,"column":277,"offset":2439},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"элвис-оператор","position":{"start":{"line":64,"column":278,"offset":2440},"end":{"line":64,"column":292,"offset":2454},"indent":[]}}],"position":{"start":{"line":64,"column":277,"offset":2439},"end":{"line":64,"column":293,"offset":2455},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":64,"column":293,"offset":2455},"end":{"line":64,"column":294,"offset":2456},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2163},"end":{"line":64,"column":294,"offset":2456},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Элвис-оператор позволяет избавится от написания утомительных условных инструкций требуя от разработчика своего указания лишь в потенциально опасных местах. Оценить его мощь будет проще переписав предыдущий пример.","position":{"start":{"line":66,"column":1,"offset":2458},"end":{"line":66,"column":214,"offset":2671},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2458},"end":{"line":66,"column":214,"offset":2671},"indent":[]}},{"type":"html","lang":"ts","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">:</span><span class=\"token constant\">D</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">:</span><span class=\"token constant\">C</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">:</span><span class=\"token constant\">B</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Ещё раз стоит обратить внимание на то,\n * что указание элвис-оператора требуется\n * во всех потенциально опасных местах, поскольку\n * наличие одной ссылки не гарантирует наличие остальных\n * во всей цепочки выовов.\n * \n * 0) поскольку отсутствуют операции над значением undefined\n * 1) если ссылка на \"b\" существует вернуть значение ассоциированное с полем \"c\"\n * 2) если ссылки на \"b\" и \"c\" существуют вернуть значение ассоциированное с полем \"d\"\n * 3) если ссылки на \"b\" и \"c\" и \"d\" существуют вернуть значение ассоциированное с полем \"n\"\n * 4) если ссылки на \"b\" и \"c\" и \"d\" и \"n\" существуют вернуть значение возвращенное методом \"toFixed\"\n */</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (0)</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (1)</span>\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (2)</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>d<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (3)</span>\n<span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>d<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>n<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (4)</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","position":{"start":{"line":68,"column":1,"offset":2673},"end":{"line":96,"column":4,"offset":3624},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"В случаях, когда элвис-оператор обнаруживает ссылку со значением ","position":{"start":{"line":98,"column":1,"offset":3626},"end":{"line":98,"column":66,"offset":3691},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":98,"column":66,"offset":3691},"end":{"line":98,"column":72,"offset":3697},"indent":[]}},{"type":"text","value":" или ","position":{"start":{"line":98,"column":72,"offset":3697},"end":{"line":98,"column":77,"offset":3702},"indent":[]}},{"type":"inlineCode","value":"undefined","position":{"start":{"line":98,"column":77,"offset":3702},"end":{"line":98,"column":88,"offset":3713},"indent":[]}},{"type":"text","value":", результатом возвращенным из выражения становится ","position":{"start":{"line":98,"column":88,"offset":3713},"end":{"line":98,"column":139,"offset":3764},"indent":[]}},{"type":"inlineCode","value":"undefined","position":{"start":{"line":98,"column":139,"offset":3764},"end":{"line":98,"column":150,"offset":3775},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":98,"column":150,"offset":3775},"end":{"line":98,"column":152,"offset":3777},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":3626},"end":{"line":98,"column":152,"offset":3777},"indent":[]}},{"type":"html","lang":"ts","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> o0<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> o1<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{a: null}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/**\n * Несмотря на то, что во втором случае\n * значение поля \"a\" равно null, n1,\n * также как и n0 будет иметь значение\n * и следовательно тип undefined.\n */</span>\n<span class=\"token keyword\">let</span> n0 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// n0 имеет значение undefined;</span>\n<span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// n1 имеет значение;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","position":{"start":{"line":100,"column":1,"offset":3779},"end":{"line":120,"column":4,"offset":4160},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"кроме того важной особенностью при использовании элвис-оператора является тот факт, что вывод типов не определяет тип как объединение включающий тип ","position":{"start":{"line":122,"column":1,"offset":4162},"end":{"line":122,"column":150,"offset":4311},"indent":[]}},{"type":"inlineCode","value":"undefined","position":{"start":{"line":122,"column":150,"offset":4311},"end":{"line":122,"column":161,"offset":4322},"indent":[]}},{"type":"text","value":", что в свою очередь избавляет от дополнительных проверок.","position":{"start":{"line":122,"column":161,"offset":4322},"end":{"line":122,"column":219,"offset":4380},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":4162},"end":{"line":122,"column":219,"offset":4380},"indent":[]}},{"type":"html","lang":"ts","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> o0<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> o1<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{a: null}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> n0 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// let n0: number; а не number | undefined</span>\n<span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// let n1: number; а не number | undefined</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","position":{"start":{"line":124,"column":1,"offset":4382},"end":{"line":137,"column":4,"offset":4636},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"Кроме того элвис-опрератор также может быть применен при вызове методов, а в случае отстутствия ссылок на них результатом вызова также будет ","position":{"start":{"line":139,"column":1,"offset":4638},"end":{"line":139,"column":142,"offset":4779},"indent":[]}},{"type":"inlineCode","value":"undefined","position":{"start":{"line":139,"column":142,"offset":4779},"end":{"line":139,"column":153,"offset":4790},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":139,"column":153,"offset":4790},"end":{"line":139,"column":154,"offset":4791},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":4638},"end":{"line":139,"column":154,"offset":4791},"indent":[]}},{"type":"html","lang":"ts","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Вводим вывод типов в амешательство путем\n     * присваивания функции в положительном случае\n     * и null в отрицательном. \n     */</span>\n    f <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>f<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// результатом выражения вызова метода является undefined</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","position":{"start":{"line":141,"column":1,"offset":4793},"end":{"line":156,"column":4,"offset":5177},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"Таким образом выход версии ","position":{"start":{"line":158,"column":1,"offset":5179},"end":{"line":158,"column":28,"offset":5206},"indent":[]}},{"type":"inlineCode","value":"v3.7","position":{"start":{"line":158,"column":28,"offset":5206},"end":{"line":158,"column":34,"offset":5212},"indent":[]}},{"type":"text","value":" дал разработчикам на языке ","position":{"start":{"line":158,"column":34,"offset":5212},"end":{"line":158,"column":62,"offset":5240},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":158,"column":63,"offset":5241},"end":{"line":158,"column":73,"offset":5251},"indent":[]}}],"position":{"start":{"line":158,"column":62,"offset":5240},"end":{"line":158,"column":74,"offset":5252},"indent":[]}},{"type":"text","value":" инструмент предотвращающий исключения связанные с обращением к отсутствующим ссылкам или ссылкам имеющим значение ","position":{"start":{"line":158,"column":74,"offset":5252},"end":{"line":158,"column":189,"offset":5367},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":158,"column":189,"offset":5367},"end":{"line":158,"column":195,"offset":5373},"indent":[]}},{"type":"text","value":", который кроме всего не чувствителен к значениям преобразование которых к типу Boolean принимает ложную форму (","position":{"start":{"line":158,"column":195,"offset":5373},"end":{"line":158,"column":307,"offset":5485},"indent":[]}},{"type":"inlineCode","value":"0","position":{"start":{"line":158,"column":307,"offset":5485},"end":{"line":158,"column":310,"offset":5488},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":158,"column":310,"offset":5488},"end":{"line":158,"column":312,"offset":5490},"indent":[]}},{"type":"inlineCode","value":"NaN","position":{"start":{"line":158,"column":312,"offset":5490},"end":{"line":158,"column":317,"offset":5495},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":158,"column":317,"offset":5495},"end":{"line":158,"column":319,"offset":5497},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":158,"column":319,"offset":5497},"end":{"line":158,"column":326,"offset":5504},"indent":[]}},{"type":"text","value":"), что в свою очередь ознаминовало начало эпохи в которой нет места конструкциям выполняющих утомительные и проверки наличия ссылок. ","position":{"start":{"line":158,"column":326,"offset":5504},"end":{"line":158,"column":459,"offset":5637},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":5179},"end":{"line":158,"column":459,"offset":5637},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":158,"column":459,"offset":5637}}}}