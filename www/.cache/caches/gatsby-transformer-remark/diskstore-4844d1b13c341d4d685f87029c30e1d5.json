{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-html-ast-d5feefe6160dc1b90b8ef98dacfdf41d-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"raw","value":"\n    <button class=\"content__button_copy-to-buffer\" path=\"utverjdenie-v-signature-signature-assertion\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  "},{"type":"element","tagName":"span","properties":{},"children":[{"type":"text","value":"Утверждение в сигнатуре (Signature Assertion)"}]}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":48,"offset":47}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Во многих языках, в том числе и ","position":{"start":{"line":3,"column":1,"offset":49},"end":{"line":3,"column":33,"offset":81}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":3,"column":34,"offset":82},"end":{"line":3,"column":41,"offset":89}}}],"position":{"start":{"line":3,"column":33,"offset":81},"end":{"line":3,"column":42,"offset":90}}},{"type":"text","value":", реализован функционал обозначаемый как ","position":{"start":{"line":3,"column":42,"offset":90},"end":{"line":3,"column":83,"offset":131}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"assert"}],"position":{"start":{"line":3,"column":83,"offset":131},"end":{"line":3,"column":91,"offset":139}}},{"type":"text","value":" и представленный функциями принимающими условие, в случае ложности которого выбрасывается исключение.","position":{"start":{"line":3,"column":91,"offset":139},"end":{"line":3,"column":193,"offset":241}}}],"position":{"start":{"line":3,"column":1,"offset":49},"end":{"line":3,"column":193,"offset":241}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> assert<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> AssertionError <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"assert\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">===</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","position":{"start":{"line":5,"column":1,"offset":243},"end":{"line":13,"column":4,"offset":434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"До версии ёё ","position":{"start":{"line":15,"column":1,"offset":436},"end":{"line":15,"column":14,"offset":449}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"v3.7"}],"position":{"start":{"line":15,"column":14,"offset":449},"end":{"line":15,"column":20,"offset":455}}},{"type":"text","value":" полноценно реализовать подобный механизм было невозможно. Поэтому начиная с текущей версии, язык ","position":{"start":{"line":15,"column":20,"offset":455},"end":{"line":15,"column":118,"offset":553}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"TypeScript","position":{"start":{"line":15,"column":119,"offset":554},"end":{"line":15,"column":129,"offset":564}}}],"position":{"start":{"line":15,"column":118,"offset":553},"end":{"line":15,"column":130,"offset":565}}},{"type":"text","value":" пополнился новой концепцией обозначаемой как ","position":{"start":{"line":15,"column":130,"offset":565},"end":{"line":15,"column":176,"offset":611}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"утверждение в сигнатуре","position":{"start":{"line":15,"column":177,"offset":612},"end":{"line":15,"column":200,"offset":635}}}],"position":{"start":{"line":15,"column":176,"offset":611},"end":{"line":15,"column":201,"offset":636}}},{"type":"text","value":" (","position":{"start":{"line":15,"column":201,"offset":636},"end":{"line":15,"column":203,"offset":638}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"assertion signatures","position":{"start":{"line":15,"column":204,"offset":639},"end":{"line":15,"column":224,"offset":659}}}],"position":{"start":{"line":15,"column":203,"offset":638},"end":{"line":15,"column":225,"offset":660}}},{"type":"text","value":") с помощью которых стало возможным моделирование рассмотренного выше приведения поведения.","position":{"start":{"line":15,"column":225,"offset":660},"end":{"line":15,"column":316,"offset":751}}}],"position":{"start":{"line":15,"column":1,"offset":436},"end":{"line":15,"column":316,"offset":751}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>AssertionError<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"assert\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/**custom assert */</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DEFAULT_ASSERTION_MESSAGE</span><span class=\"token operator\">=</span><span class=\"token string\">'this condition is false'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">stringAssert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">condition<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> asserts condition <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            message<span class=\"token punctuation\">:</span>message<span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token constant\">DEFAULT_ASSERTION_MESSAGE</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toUpperCase</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">:</span><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    text<span class=\"token punctuation\">.</span><span class=\"token function\">touppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not error</span>\n\n    <span class=\"token function\">stringAssert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// text.touppercase(); // error</span>\n\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","position":{"start":{"line":17,"column":1,"offset":753},"end":{"line":40,"column":4,"offset":1277}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"При использовании механизма ","position":{"start":{"line":42,"column":1,"offset":1279},"end":{"line":42,"column":29,"offset":1307}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"утверждения в сигнатуре","position":{"start":{"line":42,"column":30,"offset":1308},"end":{"line":42,"column":53,"offset":1331}}}],"position":{"start":{"line":42,"column":29,"offset":1307},"end":{"line":42,"column":54,"offset":1332}}},{"type":"text","value":" с имеющимся механизмом ","position":{"start":{"line":42,"column":54,"offset":1332},"end":{"line":42,"column":78,"offset":1356}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"утверждения типа","position":{"start":{"line":42,"column":79,"offset":1357},"end":{"line":42,"column":95,"offset":1373}}}],"position":{"start":{"line":42,"column":78,"offset":1356},"end":{"line":42,"column":96,"offset":1374}}},{"type":"text","value":" условие из вызова утверждающей функции можно перенести в её тело.","position":{"start":{"line":42,"column":96,"offset":1374},"end":{"line":42,"column":162,"offset":1440}}}],"position":{"start":{"line":42,"column":1,"offset":1279},"end":{"line":42,"column":162,"offset":1440}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isStringAssert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> asserts value <span class=\"token keyword\">is</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">value is not type string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toUpperCase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    text<span class=\"token punctuation\">.</span><span class=\"token function\">touppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not error</span>\n\n    <span class=\"token function\">isStringAssert</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// text.touppercase(); // error</span>\n\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","position":{"start":{"line":44,"column":1,"offset":1442},"end":{"line":59,"column":4,"offset":1784}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Стоит заметить, что в случае переноса условного выражения в тело утверждающей функции сигнатура которой лишина ","position":{"start":{"line":61,"column":1,"offset":1786},"end":{"line":61,"column":112,"offset":1897}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"утверждения типов","position":{"start":{"line":61,"column":113,"offset":1898},"end":{"line":61,"column":130,"offset":1915}}}],"position":{"start":{"line":61,"column":112,"offset":1897},"end":{"line":61,"column":131,"offset":1916}}},{"type":"text","value":", то есть содержащей исключительно ","position":{"start":{"line":61,"column":131,"offset":1916},"end":{"line":61,"column":166,"offset":1951}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"утверждения в сигнатуре","position":{"start":{"line":61,"column":167,"offset":1952},"end":{"line":61,"column":190,"offset":1975}}}],"position":{"start":{"line":61,"column":166,"offset":1951},"end":{"line":61,"column":191,"offset":1976}}},{"type":"text","value":", подобный механизм функционировать не будет.","position":{"start":{"line":61,"column":191,"offset":1976},"end":{"line":61,"column":236,"offset":2021}}}],"position":{"start":{"line":61,"column":1,"offset":1786},"end":{"line":61,"column":236,"offset":2021}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isStringAssert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> asserts value <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">value is not type string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toUpperCase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    text<span class=\"token punctuation\">.</span><span class=\"token function\">touppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not error</span>\n\n    <span class=\"token function\">isStringAssert</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    text<span class=\"token punctuation\">.</span><span class=\"token function\">touppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not error</span>\n\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","position":{"start":{"line":63,"column":1,"offset":2023},"end":{"line":78,"column":4,"offset":2356}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":79,"column":1,"offset":2357}}}}