{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-html-30c3ba41e53ee41671bee859a8d79068-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"operator-obedineniya-so-znacheniem-null\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Оператор объединения со значением null (??)</span></h2>\n<p>Ко всему прочему начиная с версии <code>v3.7</code> в <em>TypeScript</em> был реализован механизм обозначеный в спецификации <em>ECMScript</em> как <em>объединение со значение null</em> (<em>nullish coalescing</em>) для чего в синтаксис был введен новый оператор представленный двумя знаками вопроса <code>??</code> по обе стороны которого распологаются опернады <code>left-operand ?? right-operand</code>. В случае когда операнд расположенный левее оператора имеет значение <code>null</code> или <code>undefined</code> то результатом выражения является операнд находящийся правее оператора. Это очень похоже на работу логического оператора <em>или</em> (<code>||</code>) за исключением того, что последний взаимодействует с любыми значениями, в то время как новый оператор исключительно с <code>null</code> и <code>undefined</code>, что в некоторых случаях избавляет от дополнительных условий.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\nundefined <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n<span class=\"token number\">NaN</span> <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n<span class=\"token string\">''</span> <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n\n\n<span class=\"token keyword\">null</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\nundefined <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// false </span>\n<span class=\"token number\">0</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// 0</span>\n<span class=\"token number\">NaN</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// NaN</span>\n<span class=\"token string\">''</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// ''</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>Механизм <em>объединение со значением null</em> является прекрасным дополнением другого такого механизма, как <em>опциональная последовательность</em>. В то время как второй механизм предотвращает исключения при операциях над ссылками имеющими значение <code>null</code> или отсутствующими вовсе <code>undefined</code>, первый предоставляет возможность задасть значение по умолчанию только при реальном его отсутствии.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> a<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>n <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let n: number = 0;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>И на последок не будет лишнем напомнить, что прибегать к обоим механизмам стоит только вмсамых крайних случаях. В других же стоит позаботится о значениях по умолчанию.</p>"}