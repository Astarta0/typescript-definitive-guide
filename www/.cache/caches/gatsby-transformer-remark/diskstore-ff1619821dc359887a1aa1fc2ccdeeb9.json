{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-ast-939def495b5a02eb26b6a82c7ece9217-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"html","value":"\n    <button class=\"content__button_copy-to-buffer\" path=\"povyshenie-tipobezopasnosti-generotorov\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  "},{"type":"span","children":[{"type":"text","value":"Повышение типобезопасности генероторов"}],"data":{"hName":"span"}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":41,"offset":40},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"До текущей версии такие конструкции как генераторы (","position":{"start":{"line":3,"column":1,"offset":42},"end":{"line":3,"column":53,"offset":94},"indent":[]}},{"type":"inlineCode","value":"generators","position":{"start":{"line":3,"column":53,"offset":94},"end":{"line":3,"column":65,"offset":106},"indent":[]}},{"type":"text","value":") имели недоработки косающиеся определения типа данных возвращаемых, как из, так и во внутрь генератора, значений.","position":{"start":{"line":3,"column":65,"offset":106},"end":{"line":3,"column":179,"offset":220},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":42},"end":{"line":3,"column":179,"offset":220},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// пример со значением возвращающимся из генератора </span>\n\n<span class=\"token comment\">// function generator(): IterableIterator&lt;\"Done\" | 100></span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">yield</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Done</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let iterator: IterableIterator&lt;\"Done\" | 100></span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let result: IteratorResult&lt;\"Done\" | 100></span>\n\n<span class=\"token comment\">/**\n * Поскольку генератор перешел взавершенное состояние\n * значение result.value может принадлежать исключительно\n * к типу string ...\n */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>done <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * ... тем не менее, вывод типов определеяет его\n     * как тип объединение (Union) string | number\n     */</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// let value: string | number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":5,"column":1,"offset":222},"end":{"line":30,"column":6,"offset":911},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// пример со значением возвращаемым в генератор</span>\n\n<span class=\"token keyword\">type</span> Greeter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// function generator(): IterableIterator&lt;undefined></span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * В строке - let greeter: Greeter = yield;\n     * предполагается, что возвращенное извнешнего кода\n     * значение будетпринадлежать к типу Greeter...\n     * \n     */</span>\n    <span class=\"token keyword\">let</span> greeter<span class=\"token punctuation\">:</span> Greeter <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>\n    greeter<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let iterator: IterableIterator&lt;undefined></span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * Строка ниже приведт кошибке во время выполнения\n * внутри  генератора при вызове метода greeter.greet();\n * поскольку возращенное значение принадлежит к типу number,\n * в то время как ожидается тип Greeter.\n */</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, runtime error</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":32,"column":1,"offset":913},"end":{"line":60,"column":6,"offset":1688},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"Начиная с версии ","position":{"start":{"line":62,"column":1,"offset":1690},"end":{"line":62,"column":18,"offset":1707},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"TypeScript","position":{"start":{"line":62,"column":19,"offset":1708},"end":{"line":62,"column":29,"offset":1718},"indent":[]}}],"position":{"start":{"line":62,"column":18,"offset":1707},"end":{"line":62,"column":30,"offset":1719},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":62,"column":30,"offset":1719},"end":{"line":62,"column":31,"offset":1720},"indent":[]}},{"type":"inlineCode","value":"3.6","position":{"start":{"line":62,"column":31,"offset":1720},"end":{"line":62,"column":36,"offset":1725},"indent":[]}},{"type":"text","value":" описанные выше недостатки были устранены.","position":{"start":{"line":62,"column":36,"offset":1725},"end":{"line":62,"column":78,"offset":1767},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1690},"end":{"line":62,"column":78,"offset":1767},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// пример со значением возвращающимся из генератора </span>\n\n<span class=\"token comment\">/**\n *  &lt;v3.6: function generator(): IterableIterator&lt;\"Done\" | 100>\n * >=v3.6: function generator(): Generator&lt;number, string, unknown>\n */</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">yield</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Done</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n *  &lt;v3.6: let iterator: IterableIterator&lt;\"Done\" | 100>\n * >=v3.6: let iterator: Generator&lt;number, string, unknown>\n */</span>\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n *  &lt;v3.6: let result: IteratorResult&lt;\"Done\" | 100>\n * >=v3.6: let result: IteratorResult&lt;number, string>\n */</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>done <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     *  &lt;v3.6: let value: string | number\n     * >=v3.6: let value: string\n     */</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":64,"column":1,"offset":1769},"end":{"line":96,"column":6,"offset":2489},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// пример со значением возвращаемым в генератор</span>\n\n<span class=\"token keyword\">type</span> Greeter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n *  &lt;v3.6: function generator(): IterableIterator&lt;undefined>\n * >=v3.6: function generator(): Generator&lt;undefined, void, Greeter>\n */</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> greeter<span class=\"token punctuation\">:</span> Greeter <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span><span class=\"token punctuation\">;</span>\n    greeter<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n *  &lt;v3.6: let iterator: IterableIterator&lt;undefined>\n * >=v3.6: let iterator: Generator&lt;undefined, void, Greeter>\n */</span>\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\niterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error! Argument of type '[123]' is not assignable to parameter of type '[] | [Greeter]'.</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":98,"column":1,"offset":2491},"end":{"line":121,"column":6,"offset":3098},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"Подобноестало возможно благодаря добавлению шести новых типов перечисленных ниже, которые вы также можете использовать при работе с генераторами. ","position":{"start":{"line":123,"column":1,"offset":3100},"end":{"line":123,"column":147,"offset":3246},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3100},"end":{"line":123,"column":147,"offset":3246},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterator</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> TNext <span class=\"token operator\">=</span> undefined<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/** ... */</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> IteratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> IteratorYieldResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> IteratorReturnResult<span class=\"token operator\">&lt;</span>TReturn<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IteratorReturnResult</span><span class=\"token operator\">&lt;</span>TReturn<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/** ... */</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IteratorYieldResult</span><span class=\"token operator\">&lt;</span>TYield<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/** ... */</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Generator</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span> TReturn <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> TNext <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Iterator</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TReturn<span class=\"token punctuation\">,</span> TNext<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/** ... */</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GeneratorFunction</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/** ... */</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">GeneratorFunctionConstructor</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/** ... */</span><span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":125,"column":1,"offset":3248},"end":{"line":134,"column":6,"offset":3746},"indent":[1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}},{"type":"paragraph","children":[{"type":"text","value":"И напоследок будет не лишним ещё раз взглянуть на очень простой и информативный пример более эффективной работы с генераторами.","position":{"start":{"line":136,"column":1,"offset":3748},"end":{"line":136,"column":128,"offset":3875},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":3748},"end":{"line":136,"column":128,"offset":3875},"indent":[]}},{"type":"html","lang":"typescript","meta":null,"value":"<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Generator&lt;number, string, boolean> \n * или по другому\n * Generator&lt;\n *  возвращаемое с помощью оператора yield  значение,\n *  возвращаемое с помощью оператора return значение,\n *  передаваемое в метод next, то есть возвращаемое в генератор, значение\n * > \n */</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Generator<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n                <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[if]  Block if in counter generator.\n                       Variable value \"i\": </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span>done <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> returnedFromGeneratorValue <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> passedToGeneratorValue <span class=\"token operator\">=</span> returnedFromGeneratorValue <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[out] Returned from generator value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> returnedFromGeneratorValue <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[in]  Passed to generator  value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> passedToGeneratorValue <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    result <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>passedToGeneratorValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[end] Return from generator resultant value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * \"[out] Returned from generator value: 0\"\n * \"[in]  Passed to generator  value: false\"\n * \"[out] Returned from generator value: 1\"\n * \"[in]  Passed to generator  value: false\"\n * \"[out] Returned from generator value: 2\"\n * \"[in]  Passed to generator  value: true\"\n * \"[if]  Block if in counter generator.\n          Variable value \"i\": 3\"\n * \"[end] Return from generator resultant value: DONE\"\n */</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>","position":{"start":{"line":138,"column":1,"offset":3877},"end":{"line":194,"column":6,"offset":5440},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},"metadata":{"filepath":""}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":194,"column":6,"offset":5440}}}}