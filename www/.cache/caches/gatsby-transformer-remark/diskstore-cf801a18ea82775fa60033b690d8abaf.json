{"expireTime":9007200833493979000,"key":"transformer-remark-markdown-html-3dc1701a7fe93215daf41c18e0749666-gatsby-remark-collect-info-for-block-code-before-prismjsgatsby-remark-prismjsgatsby-remark-decorate-block-codegatsby-remark-add-heading-link-","val":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"prividenie-k-konstante-const-assertion\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Привидение к константе (const assertion)</span></h2>\n<p>Ни для кого не секрет, что с точки зрения <em>JavaScript</em>, а следовательно и <em>TypeScript</em>, все примитивные литеральные значения являются константными значениями. С точки зрения среды исполнения два эквивалентных литерала любого литерального типа являются единым значением. То есть, среда исполнения расценивает два строковых литерала <code>'text'</code> и <code>'text'</code>, как один литерал. Тоже самое справедливо и для остальных литералов к которым помимо типа <code>string</code> также относятся такие типы, как <code>number</code>, <code>boolean</code> и <code>symbol</code>. </p>\n<p>Тем не менее, сложно найти разработчика <em>TypeScript</em>, который при объявлении каких-либо конструкций, которым предстоит проверка на принадлжность к литеральному типу, не испытывал дискомфорта из-за вывода типов.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Status <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token operator\">|</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> Status<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> reuest<span class=\"token punctuation\">:</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error, Type 'number' is not assignable to type 'Status'.ts(2322)</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>В коде выше ошибка возникает по причине того, что вывод типов определяет принадлежность значения переменной <code>status</code> к типу <code>number</code>, а не литеральному числовому типу <code>200</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// вывод типов видит как</span>\n<span class=\"token keyword\">let</span> status<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\n<span class=\"token comment\">// в то время как требуется так</span>\n<span class=\"token keyword\">let</span> status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>До версии <em>TypeScript</em> <code>v3.4</code> без явного указания типа или явного приведения к нему, существовал только один выход из сложившейся, в коде выше, ситуации. Он заключался в утверждении типа, спомощью оператора <code>as</code> либо угловых скобок <code>&#x3C;></code>, непосредственно самого значения нуждающегося в этом.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Status <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token operator\">|</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> Status<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// утверждаем компилятору..</span>\n<span class=\"token keyword\">let</span> reuest<span class=\"token punctuation\">:</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> status <span class=\"token keyword\">as</span> <span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// …с помощью as оператора</span>\n<span class=\"token keyword\">let</span> reuest<span class=\"token punctuation\">:</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token number\">200</span><span class=\"token operator\">></span>status<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// …с помощью угловых скобок</span>\n<span class=\"token comment\">// …что должен рассматривать значение асоциированное со 'status', как значение принадлежащие к литеральному типу 'Status'</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p><em>TypeScript</em>, начиная с версии <code>v3.4</code>, вводит такое понятие, как <code>const assertion</code> (утверждение к константе или константное утверждение).</p>\n<p>Константное утверждение это такое утверждение объявление которого производится с помощью опертора <code>as</code> либо угловых скобок <code>&#x3C;></code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Status <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token operator\">|</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> Status<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> reuest<span class=\"token punctuation\">:</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> status <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span>\n<span class=\"token keyword\">let</span> reuest<span class=\"token punctuation\">:</span> Request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span><span class=\"token operator\">></span>status<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>По причине того, что компилятор получает инструкции заставляющие его расценивать значение как константное, вывод типов определяет его принадлежность к литеральному типу.</p>\n<p>Утверждение к константе заставляет вывод типов определять принадлежность массива к типу <code>readonly tuple</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let a: number[]</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let b: readonly [200, 404]</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let c: readonly [200, 404]</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>В случае с объектным типом, утверждение к константе рекурсивно помечает все его поля как <code>readonly</code>. Кроме того, все его поля принадлежащие к примитивным типам расцениваются как литеральные типы.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> NotConstResponseType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    status<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        role<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ConstResponseType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> <span class=\"token operator\">|</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        role<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>role<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NotConstResponseType</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>role<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ConstResponseType</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>role<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ConstResponseType</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>Но стоит помнить, что утверждение к констранте, применимо исключительно к литералам <code>number</code>, <code>string</code>, <code>boolean</code>, <code>array</code> и <code>object</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'value'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok - 'value' является литералом, let a: \"value\"</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok - 100 является литералом, let b: 100</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok - true является литералом, let c: true</span>\n\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok - [] является литералом, let d: readonly []</span>\n<span class=\"token keyword\">let</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok - {} является литералом, let e: {readonly f: 100;}</span>\n\n<span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let array: number[]</span>\n<span class=\"token keyword\">let</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let object: {f: number;}</span>\n\n<span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> value <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error - value это ссылка идентификатор хранящий литерал</span>\n<span class=\"token keyword\">let</span> g <span class=\"token operator\">=</span> array <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error - array это ссылка на идентификатор хранящий ссылку на объект массива</span>\n<span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> object <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error - object это ссылка иденитификатор хранящий ссылку на объект объекта</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>Но кроме того, все три рассмотренных случая утверждения к константе (примитивных, массивов и объектных типов) может создать впечатление, что в <em>TypeScript</em>, наконец, появились структуры, которые справедливо назвать теми самыми, неизменяемыми ни при каких условиях, константами. И это действительно так, но лишь от части. Дело в том, что на момент версии <em>TypeScript</em> <code>v3.4</code> принадлежность объектных и массивоподобных типов к константе зависит от значения с которыми они ассоциированы.</p>\n<p>В случае, когда литералы ссылочных типов (массивы и объекты) ассоциированны при помощи агрегационных отношений со значением также принадлежащим к ссылочному типу, то они представляются такими, какими были на момент ассоциации. Кроме того поведение механизма приведения к константе зависит от другого механизма – деструктуризации.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> defaultObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let defaultObject: {f: number;}</span>\n<span class=\"token keyword\">let</span> constObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let constObject: {readonly f: 100;}</span>\n\n<span class=\"token keyword\">let</span> defaultArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let defaultArray: number[]</span>\n<span class=\"token keyword\">let</span> constArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let constArray: readonly [0, 1, 2]</span>\n\n\n<span class=\"token comment\">// неожиданно - o0.f не имеет модификатора readonly! Однако ожидаемо, что o0.f.f иммутабельный (неизменяемый) объект</span>\n<span class=\"token keyword\">let</span> o0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {f: {readonly f: 100;};}</span>\n<span class=\"token comment\">// ожидаемо - o1.f имеет модификатор readonly. Вполне ожидаемо: o1.f.f мутабельный (изменяемый) объект</span>\n<span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> defaultObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {readonly f: {f: number;};}</span>\n<span class=\"token comment\">// ожидаемо - o2 иммутабельный (неизменяемый) объект </span>\n<span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>defaultObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {readonly f: number;}</span>\n<span class=\"token comment\">// неожиданно - o3.f не имеет модификатора readonly. ожиданно- o3.f.f иммутабельный (неизменяемый) объект</span>\n<span class=\"token keyword\">let</span> o3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>defaultObject<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {f: {readonly f: number;};}</span>\n\n<span class=\"token comment\">// ожиданно - o4.f и o4.f.f иммутабельные (неизменяемые) объекты</span>\n<span class=\"token keyword\">let</span> o4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> constObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let o4: {readonly f: {readonly f: 100;};}</span>\n<span class=\"token comment\">// ожиданно - o5 иммутабельный (неизменяемый)  объект</span>\n<span class=\"token keyword\">let</span> o5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>constObject<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let o5: {readonly f: 100;}</span>\n<span class=\"token comment\">// неожиданно - o6.f не имеет модификатора readonly. ожиданно- o6.f.f иммутабельный (неизменяемый) объект</span>\n<span class=\"token keyword\">let</span> o6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>f<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>constObject<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {f: {readonly f: 100;};}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>По причине того, что непримитивные (объектные) типы данных, хранящиеся в массиве, подчиняются правилам описанным выше, подробное рассмотрение процесса утверждения массива к константе будет опущено.</p>\n<p>И последнее о чем стоит упомянуть, утверждение к константе применимо только к простым выражениям.</p>\n<p>let a = (Math.round(Math.random() * 1) ? 'yes' : 'no') as const; // Error\nlet b = Math.round(Math.random() * 1) ? 'yes' as const : 'no' as const; // Ok, let b: \"yes\" | \"no\"</p>"}