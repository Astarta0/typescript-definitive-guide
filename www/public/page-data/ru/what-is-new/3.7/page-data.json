{"componentChunkName":"component---src-page-templates-what-is-new-page-what-is-new-page-provider-tsx","path":"/ru/what-is-new/3.7","webpackCompilationHash":"","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"locale":"ru","localization":{"lang":"ru","title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи.","appNavigation":[{"path":"/ru","name":"Главная"},{"path":"/ru/book/chapters","name":"Оглавление"},{"path":"/ru/what-is-new","name":"Что нового?"},{"path":"/ru/tests","name":"Срез знаний"},{"path":"/ru/keywords","name":"Ключевой указатель"}],"notification":{"behaviorNotification":{"copyLink":"Ссылка скопированна!"}},"layouts":{"shared":{"informers":{"donateInformer":{"minBanner":{"label":"Хочешь поддержать проект финансово?","buttons":{"yes":"Да, хочу! Узнать подробнее...","no":"Нет. Закрыть окно."}},"maxBanner":{"html":{"__html":"Чтобы <b>контент</b> приносил <b>максимальную пользу</b> его <b>необходимо</b> постоянно <b>совершенствовать</b> и <b>адаптировать</b>\n        под каждую новую версию <i>TypeScript</i>. Это отнимает <b>много времени</b> и без Вашей, даже <b>незначительно\n        финансовой</b>, поддержки практически <b>невозможно</b>. Помогая проекту вы прежде всего принимаете <b>участие</b> в\n        <b>развитии</b> профессионального уровня ваших <b>друзей</b>, <b>коллег</b>, <b>подчиненных</b>. Выпусти желание\n        сделать свой мир лучше. <b>Сделай контент для будующих специалистов ещё качественей и доступней!</b>"},"href":"#"}}},"appHeader":{"navToggleButton":{"tooltips":{"open":["Открыть боковое","меню"],"close":["Закрыть боковое","меню"]}},"appMenu":{"pdfButton":{"href":"#","tooltip":["Скачать","PDF версию"],"label":"Скачать PDF версию"},"telegramButton":{"href":"#","tooltip":["Следить за","изменениями в","Telegram"],"label":["Следить за изменениями в","Telegram"]},"githubButton":{"href":"#","tooltip":["Посетить проект на","Github"],"label":["Посетить проект на","Github"]}},"donateDropdown":{"href":"#","toggleButton":{"label":["Поддержать","финансово"]},"content":{"title":"Сделай контент для будующих поколений ещё качественей и доступней!","subtitle":{"__html":"Контент требует постоянного совершенстования и адаптации под каждую новую версию\nязыка TypeScript.\nЭто отнимает много времени и без Вашей, даже незначительно финансовой, поддержки практически\nневозможно.\nПрийми участие в развитии профессионального уровня своих друзей, коллег, подчиненных. Встань на\nсторону небезразличных!"}}},"appSearch":{"inputPlaceholder":"Я ищу...","submitButton":{"ariaLabel":"Щтправить"}}}}},"pages":{"index":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{}},"book__chapters":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буффер обмена"},"collapseTocButton":{"tooltip":{"openState":"Открыть","closeState":"Закрыть"}}},"secondaryContentBar":{"label":"Оглавление","tocFilterButton":{"tooltip":"Отфильтровать на основе разделов"},"tocCollapseAllButton":{"tooltip":{"openState":"Расскрыть все","closeState":"Закрыть все"}}},"asideLayout":{"tagBarLabel":"Тематические разделы","tagBar":{"cleanFilterButton":"Все разделы"}}}},"book__chapter":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"greeting":"ПриветМир!"}},"what-is-new__toc":{"metadata":{"title":"TypeScript - в деталях","description":"Подробное руководство по языку TypeScript, которое шаг за шагом раскрывает весь его потенциал не оставляя без внимания ни одной мелочи."},"gui":{"primaryContentBar":{"label":"История нововведений"},"tocItem":{"copyLinkToBufferButton":{"tooltip":"Скопировать ссылку в буффер обмена"}}}}}},"innovationData":{"versionMMP":"3.7","lastVersionStatus":{"version":"3.7","date":"November 5, 2019"},"innovations":[{"id":"","version":"3.7","innovationName":"Оператор опциональной последовательности (?.)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"operator-opcionalnoi-posledovatelnosti","html":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"operator-opcionalnoi-posledovatelnosti\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Оператор опциональной последовательности (?.)</span></h2>\n<p>Начиная с текущей (<code>v3.7</code>) версии, <em>TypeScript</em> реализовал функционал обозначаемый как опертор опциональной последовательности (<em>optional chaining operator</em>) внесенный в спецификацию <em>ECMScript</em> комитетом <em>TC39</em>. Оператор опциональной последовательности обозначается вопросительным знаком после которого следует точка <code>?.</code> и предназначен для безопасного обращения к членам объекта через ссылку которая может иметь значение <code>null</code> или <code>undefined</code>. Этого функционала очень давно все ждали, поэтому не будем медлить и немедля приступим к его рассмотрению на простом пример.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\">some.ts</span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * Вложенные друг в друга типы\n * (как матрешки) объявленные\n * семантически в обратном порядке.\n */</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">:</span><span class=\"token constant\">D</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">:</span><span class=\"token constant\">C</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">:</span><span class=\"token constant\">B</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Представьте сценарий по которому\n * ответ от сервера может представлять\n * из себя json соответствующий как типу\n * A так и объекту у которого отсутствуют\n * какие-либо принаки {}.\n */</span>\n\n\n<span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * При поппытке обращения к несуществующим\n * полям объекта возникнет соответствующее\n * исключение.\n */</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! поскольку отсутствуют операции над значением undefined</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Runtime Error! </span>\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Runtime Error!</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Runtime Error!</span>\n\n<span class=\"token comment\">/**\n * Подобное можно избежать произведя\n * проверку на существование ссылок.\n */</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Здесь можно обратится к полю n,\n     * которое также может быть не определенно\n     * что при попытке вызвать методы реализованные\n     * в типе Number также приведет к исключению.\n     * Чтобы этого избежать потребуется дополнительная\n     * проверка. Но стоит сразу заметить, что обычной\n     * проверки на существование поля a.b.c.d.n может\n     * быть недостаточно, поскольку значение поля n може\n     * быть 0, что при преобразовании типов преобразуется\n     * в false. Поэтому помимо наличие самого поля необходимо\n     * также проверить его значение. \n     */</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Сложно представить разработчика, который на практике не сталкивался с чем-то подобным и не испытывал желания избавится от написания утомительных проверок. И наконец свершилось! Разработчики <em>TypeScript</em> реализовали оператор опциональной последовательности известный также как <em>элвис-оператор</em>.</p>\n<p>Элвис-оператор позволяет избавится от написания утомительных условных инструкций требуя от разработчика своего указания лишь в потенциально опасных местах. Оценить его мощь будет проще переписав предыдущий пример.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">:</span><span class=\"token constant\">D</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">:</span><span class=\"token constant\">C</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">:</span><span class=\"token constant\">B</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Ещё раз стоит обратить внимание на то,\n * что указание элвис-оператора требуется\n * во всех потенциально опасных местах, поскольку\n * наличие одной ссылки не гарантирует наличие остальных\n * во всей цепочки выовов.\n * \n * 0) поскольку отсутствуют операции над значением undefined\n * 1) если ссылка на \"b\" существует вернуть значение ассоциированное с полем \"c\"\n * 2) если ссылки на \"b\" и \"c\" существуют вернуть значение ассоциированное с полем \"d\"\n * 3) если ссылки на \"b\" и \"c\" и \"d\" существуют вернуть значение ассоциированное с полем \"n\"\n * 4) если ссылки на \"b\" и \"c\" и \"d\" и \"n\" существуют вернуть значение возвращенное методом \"toFixed\"\n */</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (0)</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (1)</span>\n<span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (2)</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>d<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (3)</span>\n<span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>d<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>n<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ok! (4)</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>В случаях, когда элвис-оператор обнаруживает ссылку со значением <code>null</code> или <code>undefined</code>, результатом возвращенным из выражения становится <code>undefined</code>. </p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> o0<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> o1<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{a: null}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/**\n * Несмотря на то, что во втором случае\n * значение поля \"a\" равно null, n1,\n * также как и n0 будет иметь значение\n * и следовательно тип undefined.\n */</span>\n<span class=\"token keyword\">let</span> n0 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// n0 имеет значение undefined;</span>\n<span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// n1 имеет значение;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>кроме того важной особенностью при использовании элвис-оператора является тот факт, что вывод типов не определяет тип как объединение включающий тип <code>undefined</code>, что в свою очередь избавляет от дополнительных проверок.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">let</span> o0<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> o1<span class=\"token punctuation\">:</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{a: null}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> n0 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// let n0: number; а не number | undefined</span>\n<span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> o0<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// let n1: number; а не number | undefined</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Кроме того элвис-опрератор также может быть применен при вызове методов, а в случае отстутствия ссылок на них результатом вызова также будет <code>undefined</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IT</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Вводим вывод типов в амешательство путем\n     * присваивания функции в положительном случае\n     * и null в отрицательном. \n     */</span>\n    f <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">10</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>f<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// результатом выражения вызова метода является undefined</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Таким образом выход версии <code>v3.7</code> дал разработчикам на языке <em>TypeScript</em> инструмент предотвращающий исключения связанные с обращением к отсутствующим ссылкам или ссылкам имеющим значение <code>null</code>, который кроме всего не чувствителен к значениям преобразование которых к типу Boolean принимает ложную форму (<code>0</code>, <code>NaN</code>, <code>false</code>), что в свою очередь ознаминовало начало эпохи в которой нет места конструкциям выполняющих утомительные и проверки наличия ссылок. </p>","commitInfoAll":[{"committedDate":"2019-12-27T08:34:29Z","message":"remove .env.development","messageHeadline":"remove .env.development","pushedDate":"2019-12-27T08:34:51Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Оператор опциональной последовательности \\(\\?\\.\\)/content.md"},{"id":"","version":"3.7","innovationName":"Оператор объединения со значением null (??)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"operator-obedineniya-so-znacheniem-null","html":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"operator-obedineniya-so-znacheniem-null\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Оператор объединения со значением null (??)</span></h2>\n<p>Ко всему прочему начиная с версии <code>v3.7</code> в <em>TypeScript</em> был реализован механизм обозначеный в спецификации <em>ECMScript</em> как <em>объединение со значение null</em> (<em>nullish coalescing</em>) для чего в синтаксис был введен новый оператор представленный двумя знаками вопроса <code>??</code> по обе стороны которого распологаются опернады <code>left-operand ?? right-operand</code>. В случае когда операнд расположенный левее оператора имеет значение <code>null</code> или <code>undefined</code> то результатом выражения является операнд находящийся правее оператора. Это очень похоже на работу логического оператора <em>или</em> (<code>||</code>) за исключением того, что последний взаимодействует с любыми значениями, в то время как новый оператор исключительно с <code>null</code> и <code>undefined</code>, что в некоторых случаях избавляет от дополнительных условий.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\nundefined <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n<span class=\"token number\">NaN</span> <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n<span class=\"token string\">''</span> <span class=\"token operator\">||</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n\n\n<span class=\"token keyword\">null</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\nundefined <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// default</span>\n<span class=\"token boolean\">false</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// false </span>\n<span class=\"token number\">0</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// 0</span>\n<span class=\"token number\">NaN</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// NaN</span>\n<span class=\"token string\">''</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">'default'</span><span class=\"token comment\">// ''</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>Механизм <em>объединение со значением null</em> является прекрасным дополнением другого такого механизма, как <em>опциональная последовательность</em>. В то время как второй механизм предотвращает исключения при операциях над ссылками имеющими значение <code>null</code> или отсутствующими вовсе <code>undefined</code>, первый предоставляет возможность задасть значение по умолчанию только при реальном его отсутствии.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_typescript\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">typescript</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> a<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>b<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>n <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// let n: number = 0;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_typescript\"></div>\n</div>\n<p>И на последок не будет лишнем напомнить, что прибегать к обоим механизмам стоит только вмсамых крайних случаях. В других же стоит позаботится о значениях по умолчанию.</p>","commitInfoAll":[{"committedDate":"2019-12-27T08:34:29Z","message":"remove .env.development","messageHeadline":"remove .env.development","pushedDate":"2019-12-27T08:34:51Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Оператор объединения со значением null \\(\\?\\?\\)/content.md"},{"id":"","version":"3.7","innovationName":"Утверждение в сигнатуре (Signature Assertion)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"utverjdenie-v-signature-signature-assertion","html":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"utverjdenie-v-signature-signature-assertion\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Утверждение в сигнатуре (Signature Assertion)</span></h2>\n<p>Во многих языках, в том числе и <em>Node.js</em>, реализован функционал обозначаемый как <code>assert</code> и представленный функциями принимающими условие, в случае ложности которого выбрасывается исключение.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> assert<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> AssertionError <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"assert\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">===</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>До версии ёё <code>v3.7</code> полноценно реализовать подобный механизм было невозможно. Поэтому начиная с текущей версии, язык <em>TypeScript</em> пополнился новой концепцией обозначаемой как <em>утверждение в сигнатуре</em> (<em>assertion signatures</em>) с помощью которых стало возможным моделирование рассмотренного выше приведения поведения.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>AssertionError<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"assert\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">/**custom assert */</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DEFAULT_ASSERTION_MESSAGE</span><span class=\"token operator\">=</span><span class=\"token string\">'this condition is false'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">stringAssert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">condition<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> asserts condition <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            message<span class=\"token punctuation\">:</span>message<span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token constant\">DEFAULT_ASSERTION_MESSAGE</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toUpperCase</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">:</span><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    text<span class=\"token punctuation\">.</span><span class=\"token function\">touppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not error</span>\n\n    <span class=\"token function\">stringAssert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// text.touppercase(); // error</span>\n\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>При использовании механизма <em>утверждения в сигнатуре</em> с имеющимся механизмом <em>утверждения типа</em> условие из вызова утверждающей функции можно перенести в её тело.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isStringAssert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> asserts value <span class=\"token keyword\">is</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">value is not type string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toUpperCase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    text<span class=\"token punctuation\">.</span><span class=\"token function\">touppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not error</span>\n\n    <span class=\"token function\">isStringAssert</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// text.touppercase(); // error</span>\n\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Стоит заметить, что в случае переноса условного выражения в тело утверждающей функции сигнатура которой лишина <em>утверждения типов</em>, то есть содержащей исключительно <em>утверждения в сигнатуре</em>, подобный механизм функционировать не будет.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isStringAssert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> asserts value <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">value is not type string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toUpperCase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    text<span class=\"token punctuation\">.</span><span class=\"token function\">touppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not error</span>\n\n    <span class=\"token function\">isStringAssert</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    text<span class=\"token punctuation\">.</span><span class=\"token function\">touppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not error</span>\n\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2019-10-19T09:07:25Z","message":"remove files 'content.md' and add files 'metadata.json' and dirs .","messageHeadline":"remove files 'content.md' and add files 'metadata.json' and dirs .","pushedDate":"2019-10-19T09:07:50Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Утверждение в сигнатуре \\(Signature Assertion\\)/content.md"},{"id":"","version":"3.7","innovationName":"Улучшена поддержка для типа never возвращаемого из функций","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"uluchshena-podderjka-dlya-tipa-never-vozvrashchaemogo-iz-funkcii","html":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"uluchshena-podderjka-dlya-tipa-never-vozvrashchaemogo-iz-funkcii\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Улучшена поддержка для типа never возвращаемого из функций</span></h2>\n<p>Основное предназначение типа <code>never</code> явным образом указывать что из вызываемой функции возврата никогда не произойдет. Как известно подобный сценарий может призойти по причине бесконечного цекла или выброса исключения.</p>\n<p>До <em>TypeScript</em> <code>v3.7</code>, в случаях когда одна функция имеющая декларацию возвращаемого типа отличного от <code>void</code> прерывала нормальное выполнение программы за счет вызова функции с возвращающим типом <code>never</code>, выводу типов требовалось либо явного указания возврата с помощью оператора <code>return</code>, либо применения инструкции <code>throw</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// [TypeScript &lt; v3.7]</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">critical</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Несмотря что в случае вызова функции critical\n * возврата из функции validate не произойдет,\n * из-за непонимания этого вывод типов считает\n * что для функции validate забыли указать\n * возвращаемое значение.\n * \n * (!) [ошибка в аннотации возвращаемого типа]\n * Function lacks ending return statement and\n * return type does not include 'undefined'.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> User <span class=\"token comment\">/**Error (!) */</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">critical</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Field \"user\" not found in object \"data.\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Для устронения ошибки требуется явно\n * указать возвращаемое значение...\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">validate_a</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> User <span class=\"token comment\">/**Error (!) */</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">critical</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Field \"user\" not found in object \"data.\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * ...либо выбросить исключение.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">validate_b</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> User <span class=\"token comment\">/**Error (!) */</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">critical</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Field \"user\" not found in object \"data.\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Начиная с версии <code>v3.7</code> вывод типов научился распознавать прерывание нормального хода программы без явного указания <code>return</code> или <code>throw</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// [TypeScript >= v3.7]</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">critical</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Явного указания return или throw\n * больше не требуется.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> User <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">critical</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Field \"user\" not found in object \"data.\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2019-10-19T09:07:25Z","message":"remove files 'content.md' and add files 'metadata.json' and dirs .","messageHeadline":"remove files 'content.md' and add files 'metadata.json' and dirs .","pushedDate":"2019-10-19T09:07:50Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Улучшена поддержка для типа never возвращаемого из функций/content.md"},{"id":"","version":"3.7","innovationName":"Проверка невызванных функций","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"proverka-nevyzvannyh-funkcii","html":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"proverka-nevyzvannyh-funkcii\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Проверка невызванных функций</span></h2>\n<p>Случаются случаи, когда разработчики по невнимательности или из-за невнятно выбранных названий забывают вызывать функции, что может привести к трудновыявляемому багу. </p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Разработчик подумал что isAuthorized\n     * это поле или свойство объекта, но не метод.\n     * \n     * Учитывая многообразие языков программирования\n     * с различными конвенциями именования, такая ошибка\n     * не является надуманной для недавно пришедших в\n     * ECMScript коммунити.\n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * гость смог выполнить действия требующие\n         * привелегии авторизованного пользователя.\n         */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Поэтому начиная с <em>TypeScript</em> <code>v3.7</code> компилятор расценивает подобные ситуации как ошибку.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [TypeScript &lt; v3.7]\n     * > Ok! Трудно выявляемая ошибка,\n     * \n     * [TypeScript >= v3.7]\n     * > Error! \n     * This condition will always return true since the\n     * function is always defined. Did you mean to call\n     * it instead?\n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Но поскольку подобное изменение является значимым, новое поведение нацелено исключительно на выражения расположенные в условном операторе <code>if</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [TypeScript >= v3.7]\n     * > Error\n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * name эквивалентно undefined\n     * хотя в реальности должно\n     * иметь значение 'guest'.\n     */</span>\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>isAuthorized <span class=\"token operator\">?</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">:</span> <span class=\"token string\">'guest'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Кроме того, оно не работает с необязательными членами и при установленным в <code>false</code> опции компилятора <code>--strictNullChecks</code>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    isAuthorized <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// необязательный член</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * [TypeScript &lt; v3.7]\n     * > Ok! Трудно выявляемая ошибка,\n     * \n     * [TypeScript >= v3.7]\n     * > Ok! Трудно выявляемая ошибка,\n     */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Также же ошибки не возникает если невызванная функция вызывается далее в условном блоке.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Ok!, ???</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Error</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    user<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>В случаях когда подобный сценарий является преднамеренным, как например при тестировании, то невызванную функцию можно проверять на <code>null</code> или <code>undefined</code>, а также прибегнуть к двойному отрицанию и тем самым дать понять что действия являются обдуманными.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IUser</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAuthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">someAction</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span>IUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAuthorized <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Ok</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span>isAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2019-10-19T09:07:25Z","message":"remove files 'content.md' and add files 'metadata.json' and dirs .","messageHeadline":"remove files 'content.md' and add files 'metadata.json' and dirs .","pushedDate":"2019-10-19T09:07:50Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Проверка невызванных функций/content.md"},{"id":"","version":"3.7","innovationName":"Рекурсивность для псевдононимов типов","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"rekursivnost-dlya-psevdononimov-tipov","html":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"rekursivnost-dlya-psevdononimov-tipov\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Рекурсивность для псевдононимов типов</span></h2>\n<p>Псевдонимы типов (<em>type aliases</em>) всегда имели строгие правила относительно рекурсии поскольку больше остальных могли привести к бесконечному обращению.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Бесконечная рекурсия</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Тем не менее относительно рекурсивности существовали правила, которые можно было обойти введя дополнительные интерфейсные типы (<code>interface</code>).</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// TypeScript &lt; v3.7</span>\n\n<span class=\"token keyword\">type</span> Json <span class=\"token operator\">=</span>\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span>\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span>\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span>\n    <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">|</span> JsonObject\n    <span class=\"token operator\">|</span> JsonArray<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">JsonObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Json<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">JsonArray</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span>Json<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<p>Поэтому начиная с текущей версии <em>TypeScript</em> вычисление правил относящихся к рекурсивности для псевдонимов типов были изменены, что позволило избавится от определения дополнительных типов.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// TypeScript >= v3.7</span>\n\n<span class=\"token keyword\">type</span> Json <span class=\"token operator\">=</span>\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span>\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span>\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span>\n    <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Json <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">|</span> Json<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2019-10-19T09:07:25Z","message":"remove files 'content.md' and add files 'metadata.json' and dirs .","messageHeadline":"remove files 'content.md' and add files 'metadata.json' and dirs .","pushedDate":"2019-10-19T09:07:50Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Рекурсивность для псевдононимов типов/content.md"},{"id":"","version":"3.7","innovationName":"Совместное использование флагов --declaration и --allowJs","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"sovmestnoe-ispolzovanie-flagov-declaration-i-allowjs","html":"<h2>\n    <button class=\"content__button_copy-to-buffer\" path=\"sovmestnoe-ispolzovanie-flagov-declaration-i-allowjs\">\n      <svg class=\"svg-icon copy-to-buffer-button__svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <use xlink:href=\"#iconmonstr-link\"></use>\n      </svg>\n      <div class=\"content__tooltip_copy-to-buffer tooltip\">\n        Скопировать ссылку в буффер обмена\n      </div>\n    </button>\n  <span>Совместное использование флагов --declaration и --allowJs</span></h2>\n<p>До текущей версии <em>TypeScript</em> акивный флаг компилятора <code>--declaration</code> позволял генерировать файлы декларации <code>.d.ts</code> только из файлов имеющих расширение <code>.ts</code> и <code>.tsx</code>. Файлы декларации существуенно снижают нагрузку возложенную на компилятор, что является важным критерием для такого механизма как ссылки на проект, который существенно ускоряет процесс сборки больших приложений.</p>\n<p>Но к сожалению флаг <code>--declaration</code> не совместим с другим таким важным флагом как <code>--allowJs</code>, который позволяет использовать в впроекте модули с расширением <code>.js</code> код в которых не поддается декларированию даже если объявления аннотированны с помощью <em>JSDoc</em>.</p>\n<p>Начиная с <em>TypeScript</em> <code>v3.7</code> это проблема устранена и теперь компилятор из-за всех сил будет пытаться описать структуру <code>JavaScript</code> кода с помощью типов, к тому же прибегая к помощи оставленной разработчиками при помощи <em>JSDoc</em>.</p>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// [File: module.js]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">VALUE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SUM</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// [File: module.d.ts]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">VALUE</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SUM</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_js\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">js</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// [File: module.js]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">VALUE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SUM</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * \n * @param {string} value \n * @returns {string}\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_js\"></div>\n</div>\n<div class=\"content__code\">\n    <div class=\"content__code-panel_top content__code-panel_lang_ts\">\n        <span class=\"content_code-label_filepath\"></span>\n        <span class=\"content_code-label_lang\">ts</span>\n    </div>\n    <div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// [File: module.d.ts]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">VALUE</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SUM</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></code></pre></div>\n    <div class=\"content__code-panel_bottom content__code-panel_lang_ts\"></div>\n</div>","commitInfoAll":[{"committedDate":"2019-10-19T09:07:25Z","message":"remove files 'content.md' and add files 'metadata.json' and dirs .","messageHeadline":"remove files 'content.md' and add files 'metadata.json' and dirs .","pushedDate":"2019-10-19T09:07:50Z","authoredByCommitter":true,"committer":{"name":"nauchikus","bio":"@TechnoFanatic(\"🍬\")\r\n","location":null,"avatarUrl":"https://avatars3.githubusercontent.com/u/31518738?v=4"}}],"fileOnGithubLink":"https://github.com/nauchikus/typescript-definitive-guide/blob/what-is-new/3.7/Совместное использование флагов --declaration и --allowJs/content.md"}]},"winTocTree":[{"id":"0","isCollapse":false,"index":0,"data":{"versionMMP":"3.3","lastVersionStatus":{"version":"3.3","date":"January 31, 2019"},"innovations":[{"id":"","version":"3.3","innovationName":"Повышение производительности сборки для команды --build --watch","dateRelease":"January 31, 2019","datePublication":"January 31, 2019","tags":[],"path":"povyshenie-proizvoditelnosti-sborki-dlya-komandy-build-watch"}]}},{"id":"1","isCollapse":false,"index":1,"data":{"versionMMP":"3.4","lastVersionStatus":{"version":"3.4","date":"March 29, 2019"},"innovations":[{"id":"","version":"3.4","innovationName":"Опции компилятора --tsBuildInfoFile","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"opcii-kompilyatora-tsbuildinfofile"},{"id":"","version":"3.4","innovationName":"Опции компилятора --incremental","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"opcii-kompilyatora-incremental"},{"id":"","version":"3.4","innovationName":"Массивоподобные readonly типы","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"massivopodobnye-readonly-tipy"},{"id":"","version":"3.4","innovationName":"Расширенный тип ReadonlyArray","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"rasshirennyi-tip-readonlyarray"},{"id":"","version":"3.4","innovationName":"Привидение к константе (const assertion)","dateRelease":"March 29, 2019","datePublication":"March 29, 2019","tags":[],"path":"prividenie-k-konstante-const-assertion"}]}},{"id":"2","isCollapse":false,"index":2,"data":{"versionMMP":"3.5","lastVersionStatus":{"version":"3.5","date":"May 29, 2019"},"innovations":[{"id":"","version":"3.5","innovationName":"Вспомогательный тип Omit","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"vspomogatelnyi-tip-omit"},{"id":"","version":"3.5","innovationName":"Улучшение механизма проверки избыточных полей в объедененных типах (Union types)","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"uluchshenie-mehanizma-proverki-izbytochnyh-polei-v-obedenennyh-tipah-union-types"},{"id":"","version":"3.5","innovationName":"Введение нового флага --allowUmdGlobalAccess","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"vvedenie-novogo-flaga-allowumdglobalaccess"},{"id":"","version":"3.5","innovationName":"Улучшение механизма проверки объединенных типов","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"uluchshenie-mehanizma-proverki-obedinennyh-tipov"},{"id":"","version":"3.5","innovationName":"Улучшение механизма вывода типа высшего порядка для обобщенных конструкторов","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"uluchshenie-mehanizma-vyvoda-tipa-vysshego-poryadka-dlya-obobshchennyh-konstruktorov"},{"id":"","version":"3.5","innovationName":"Неявное ограничение обобщенных параметров типом unknown","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"neyavnoe-ogranichenie-obobshchennyh-parametrov-tipom-unknown"},{"id":"","version":"3.5","innovationName":"Изменение правил для типа unknown и индексной сигнатуре","dateRelease":"May 29, 2019","datePublication":"May 29, 2019","tags":[],"path":"izmenenie-pravil-dlya-tipa-unknown-i-indeksnoi-signature"}]}},{"id":"3","isCollapse":false,"index":3,"data":{"versionMMP":"3.6","lastVersionStatus":{"version":"3.6","date":"August 28, 2019"},"innovations":[{"id":"","version":"3.6","innovationName":"Повышение типобезопасности генероторов","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"povyshenie-tipobezopasnosti-generotorov"},{"id":"","version":"3.6","innovationName":"Добавление хелпера иметирующего механизм spread array при компиляции в ecmascript ниже версии 6 при неактивном флаге --downlevelIteration","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"dobavlenie-helpera-imetiruushchego-mehanizm-spread-array-pri-kompilyacii-v-ecmascript-nije-versii-6-pri-neaktivnom-flage-downleveliteration"},{"id":"","version":"3.6","innovationName":"Расширение системы типов типами представляющими структуры данных только для чтения","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"rasshirenie-sistemy-tipov-tipami-predstavlyaushchimi-struktury-dannyh-tolko-dlya-chteniya"},{"id":"","version":"3.6","innovationName":"Строковой идентификатор функции-конструктора","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"strokovoi-identifikator-funkcii-konstruktora"},{"id":"","version":"3.6","innovationName":"Расширение вывода об ошибках при работе с Promise","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"rasshirenie-vyvoda-ob-oshibkah-pri-rabote-s-promise"},{"id":"","version":"3.6","innovationName":"Слияние одноименных классов и функций из окружающего контекста","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"sliyanie-odnoimennyh-klassov-i-funkcii-iz-okrujaushchego-konteksta"},{"id":"","version":"3.6","innovationName":"Добавлена поддержка Unicode для идентификаторов","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"dobavlena-podderjka-unicode-dlya-identifikatorov"},{"id":"","version":"3.6","innovationName":"Поддержка import.meta для SystemJS","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"podderjka-import-meta-dlya-systemjs"},{"id":"","version":"3.6","innovationName":"get и set в окружающем контексте","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"get-i-set-v-okrujaushchem-kontekste"},{"id":"","version":"3.6","innovationName":"Api для поддержки --build и --incremental","dateRelease":"August 28, 2019","datePublication":"August 28, 2019","tags":[],"path":"api-dlya-podderjki-build-i-incremental"}]}},{"id":"4","isCollapse":false,"index":4,"data":{"versionMMP":"3.7","lastVersionStatus":{"version":"3.7","date":"November 5, 2019"},"innovations":[{"id":"","version":"3.7","innovationName":"Оператор опциональной последовательности (?.)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"operator-opcionalnoi-posledovatelnosti"},{"id":"","version":"3.7","innovationName":"Оператор объединения со значением null (??)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"operator-obedineniya-so-znacheniem-null"},{"id":"","version":"3.7","innovationName":"Утверждение в сигнатуре (Signature Assertion)","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"utverjdenie-v-signature-signature-assertion"},{"id":"","version":"3.7","innovationName":"Улучшена поддержка для типа never возвращаемого из функций","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"uluchshena-podderjka-dlya-tipa-never-vozvrashchaemogo-iz-funkcii"},{"id":"","version":"3.7","innovationName":"Проверка невызванных функций","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"proverka-nevyzvannyh-funkcii"},{"id":"","version":"3.7","innovationName":"Рекурсивность для псевдононимов типов","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"rekursivnost-dlya-psevdononimov-tipov"},{"id":"","version":"3.7","innovationName":"Совместное использование флагов --declaration и --allowJs","dateRelease":"November 5, 2019","datePublication":"November 5, 2019","tags":[],"path":"sovmestnoe-ispolzovanie-flagov-declaration-i-allowjs"}]}}],"pageNavDataAll":[{"name":"3.3","path":"","sections":[{"name":"Повышение производительности сборки для команды --build --watch","path":"povyshenie-proizvoditelnosti-sborki-dlya-komandy-build-watch"}]},{"name":"3.4","path":"","sections":[{"name":"Опции компилятора --tsBuildInfoFile","path":"opcii-kompilyatora-tsbuildinfofile"},{"name":"Опции компилятора --incremental","path":"opcii-kompilyatora-incremental"},{"name":"Массивоподобные readonly типы","path":"massivopodobnye-readonly-tipy"},{"name":"Расширенный тип ReadonlyArray","path":"rasshirennyi-tip-readonlyarray"},{"name":"Привидение к константе (const assertion)","path":"prividenie-k-konstante-const-assertion"}]},{"name":"3.5","path":"","sections":[{"name":"Вспомогательный тип Omit","path":"vspomogatelnyi-tip-omit"},{"name":"Улучшение механизма проверки избыточных полей в объедененных типах (Union types)","path":"uluchshenie-mehanizma-proverki-izbytochnyh-polei-v-obedenennyh-tipah-union-types"},{"name":"Введение нового флага --allowUmdGlobalAccess","path":"vvedenie-novogo-flaga-allowumdglobalaccess"},{"name":"Улучшение механизма проверки объединенных типов","path":"uluchshenie-mehanizma-proverki-obedinennyh-tipov"},{"name":"Улучшение механизма вывода типа высшего порядка для обобщенных конструкторов","path":"uluchshenie-mehanizma-vyvoda-tipa-vysshego-poryadka-dlya-obobshchennyh-konstruktorov"},{"name":"Неявное ограничение обобщенных параметров типом unknown","path":"neyavnoe-ogranichenie-obobshchennyh-parametrov-tipom-unknown"},{"name":"Изменение правил для типа unknown и индексной сигнатуре","path":"izmenenie-pravil-dlya-tipa-unknown-i-indeksnoi-signature"}]},{"name":"3.6","path":"","sections":[{"name":"Повышение типобезопасности генероторов","path":"povyshenie-tipobezopasnosti-generotorov"},{"name":"Добавление хелпера иметирующего механизм spread array при компиляции в ecmascript ниже версии 6 при неактивном флаге --downlevelIteration","path":"dobavlenie-helpera-imetiruushchego-mehanizm-spread-array-pri-kompilyacii-v-ecmascript-nije-versii-6-pri-neaktivnom-flage-downleveliteration"},{"name":"Расширение системы типов типами представляющими структуры данных только для чтения","path":"rasshirenie-sistemy-tipov-tipami-predstavlyaushchimi-struktury-dannyh-tolko-dlya-chteniya"},{"name":"Строковой идентификатор функции-конструктора","path":"strokovoi-identifikator-funkcii-konstruktora"},{"name":"Расширение вывода об ошибках при работе с Promise","path":"rasshirenie-vyvoda-ob-oshibkah-pri-rabote-s-promise"},{"name":"Слияние одноименных классов и функций из окружающего контекста","path":"sliyanie-odnoimennyh-klassov-i-funkcii-iz-okrujaushchego-konteksta"},{"name":"Добавлена поддержка Unicode для идентификаторов","path":"dobavlena-podderjka-unicode-dlya-identifikatorov"},{"name":"Поддержка import.meta для SystemJS","path":"podderjka-import-meta-dlya-systemjs"},{"name":"get и set в окружающем контексте","path":"get-i-set-v-okrujaushchem-kontekste"},{"name":"Api для поддержки --build и --incremental","path":"api-dlya-podderjki-build-i-incremental"}]},{"name":"3.7","path":"","sections":[{"name":"Оператор опциональной последовательности (?.)","path":"operator-opcionalnoi-posledovatelnosti"},{"name":"Оператор объединения со значением null (??)","path":"operator-obedineniya-so-znacheniem-null"},{"name":"Утверждение в сигнатуре (Signature Assertion)","path":"utverjdenie-v-signature-signature-assertion"},{"name":"Улучшена поддержка для типа never возвращаемого из функций","path":"uluchshena-podderjka-dlya-tipa-never-vozvrashchaemogo-iz-funkcii"},{"name":"Проверка невызванных функций","path":"proverka-nevyzvannyh-funkcii"},{"name":"Рекурсивность для псевдононимов типов","path":"rekursivnost-dlya-psevdononimov-tipov"},{"name":"Совместное использование флагов --declaration и --allowJs","path":"sovmestnoe-ispolzovanie-flagov-declaration-i-allowjs"}]}]}}}